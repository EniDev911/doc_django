{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django","text":"<p>Django es un framework web escrito en Python de alto nivel del lado del servidor extremadamente popular, es de c\u00f3digo abierto y escrito en Python y respeta el patr\u00f3n de dise\u00f1o conocido como modelo vista controlador (MVC) y lo acu\u00f1a como model template view (MTV) que fomenta un desarrollo r\u00e1pido y limpio.</p> <ul> <li> <p> Configurar entorno virtual</p> <p>Un entorno virtual es un \u00e1rbol de directorios que contiene archivos ejecutables de Python y otros archivos que indican que es un entorno virtual. Es fundamental administrar entornos virtuales para los proyectos de Django.</p> <p>Puedes tener varios entornos, sin tener conflictos entre ellos</p> </li> <li> <p> Instalar Django</p> <p>Gu\u00eda paso a paso de c\u00f3mo instalar Django en Windows o Linux (Ubuntu o Debian) para empezar a desarrollar con este framework de Python. No olvides apoyarte con la documentaci\u00f3n oficial.</p> <p>Asegurate de tener Python instalado antes de seguir la gu\u00eda</p> </li> <li> <p> Crear una aplicaci\u00f3n</p> <p>Django nos permite crear aplicaciones web de forma r\u00e1pida y sencilla, crea autom\u00e1ticamente una estructura que lo hace f\u00e1cil de trabajar y es muy vers\u00e1til. Se pueden crear varias aplicaciones o apps dentro de un proyecto.</p> <p>En cada proyecto de Django, es requerido tener al menos una aplicaci\u00f3n</p> </li> <li> <p> Django Views</p> <p>Las vistas de Django son funciones de Python que toman solicitudes http y devuelven una respuesta http, como documentos HTML.</p> <p>Las vistas son como los controladores en el caso de MVC.</p> <p>Una views es un lugar donde ponemos la l\u00f3gica de la aplicaci\u00f3n</p> </li> </ul>"},{"location":"configurar-entorno-virtual/","title":"Configurar entorno virtual","text":"<p>Cuando instalamos Python3 obtenemos un \u00fanico entorno global que es compartido por todos los proyectos y todo el c\u00f3digo de Python. Si bien podr\u00edamos instalar Django y otros paquetes en el entorno global. Sin embargo s\u00f3lo puedes instalar una versi\u00f3n en particular de cada paquete.</p> <p>Cuidado</p> <p>Las aplicaciones Python instaladas en el entorno global pueden entrar en conflicto potencialmente unas con otras (Ej. si dependen de diferentes versiones del mismo paquete).</p> <p>Si instalamos Django dentro del entorno por defecto/global s\u00f3lo podr\u00e1s apuntar a una s\u00f3la versi\u00f3n de Django en la computadora. Esto puede ser un problema si quieres crear en el futuro nuevos sitios (usando las \u00fatilmas versiones de Django) pero manteniendo los sitios web que dependen de versiones m\u00e1s antiguas.</p> <p>Como resultado, los desarrolladores experimentados normalmente configuran y ejecutan las aplicaciones Python dentro de entornos virtuales Python independientes.</p> Esquema de Entornos Virtuales de Python <pre><code>graph TD\n    B(&lt;img src=\"https://enidev911.github.io/fullstack-python/assets/img/base.png\" width='28' /&gt;Python 3.9)\n    B---T[Entornos Virtuales]\n    T--&gt;C(&lt;img src=\"https://enidev911.github.io/fullstack-python/assets/img/venv1.png\" width='28' /&gt;Python 3.9)\n    T--&gt;D(&lt;img src=\"https://enidev911.github.io/fullstack-python/assets/img/venv2.png\" width='28' /&gt;Python 3.9)\n    T--&gt;E(&lt;img src=\"https://enidev911.github.io/fullstack-python/assets/img/venv3.png\" width='28' /&gt;Python 3.9)\n    subgraph ''\n    C--&gt;CD[Django==2.0]\n    D--&gt;DD[Django==2.2]\n    E--&gt;ED[Django==3.2]\n    end</code></pre>"},{"location":"configurar-entorno-virtual/#instalacion-de-software-para-crear-entorno-virtual","title":"Instalaci\u00f3n de Software para crear entorno virtual","text":"<p>Despu\u00e9s de instalar Python y pip, procedemos a instalar virtualenvwrapper (que incluye virtualenv) usando pip3:</p> bash<pre><code>sudo pip3 install virtualenvwrapper\n</code></pre> <p>A continuaci\u00f3n se a\u00f1ade las siguientes l\u00edneas en el archivo de inicio del shell (\u00e9ste es un archivo oculto <code>.bashrc</code> o <code>.zshrc</code> si usas zsh)</p> <code>.bashrc</code> <pre><code>export WORKON_HOME=$HOME/.virtualenvs # (1)!\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\nexport PROJECT_HOME=$HOME/Devel\nsource /usr/local/bin/virtualenvwrapper.sh #(2)!\n</code></pre> <ol> <li> <p>La variable <code>WORKON_HOME</code> determina en qu\u00e9 directorio se deben crear los entornos virtuales de Python.</p> </li> <li> <p>Por \u00faltimo, se debe agregar esta l\u00ednea al archivo <code>~/.bashrc</code> para especificar en d\u00f3nde est\u00e1 ubicado el ejecutable de virtualenvwrapper.</p> </li> </ol>"},{"location":"configurar-entorno-virtual/#como-crear-entornos-virtuales","title":"C\u00f3mo crear entornos virtuales","text":"<p>Se debe ejecutar el comando <code>mkvirtualenv</code> m\u00e1s el nombre del entorno virtual Python que queremos crear:</p> bash<pre><code>mkvirtualenv nombre_entorno\n</code></pre>"},{"location":"configurar-entorno-virtual/#como-activar-un-entorno-virtual","title":"C\u00f3mo activar un entorno virtual","text":"<p>Para activar un virtualenv con Virtualenvwrapper solamente se necesita ejecutar el comando <code>workon</code> m\u00e1s el nombre del virtualenv en la terminal:</p> Crear el entornoSalida bash<pre><code>workon django-test\n</code></pre> <pre><code>created virtual environment CPython3.9.2.final.0-64 in 9185ms\n  creator CPython3Posix(dest=/home/enidev911/.virtualenvs/django-test, clear=False, no_vcs_ignore=False, global=False)\n  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/enidev911/.local/share/virtualenv)\n    added seed packages: pip==24.1, setuptools==70.1.0, wheel==0.43.0\n  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator\nvirtualenvwrapper.user_scripts creating /home/enidev911/.virtualenvs/django-test/bin/predeactivate\nvirtualenvwrapper.user_scripts creating /home/enidev911/.virtualenvs/django-test/bin/postdeactivate\nvirtualenvwrapper.user_scripts creating /home/enidev911/.virtualenvs/django-test/bin/preactivate\nvirtualenvwrapper.user_scripts creating /home/enidev911/.virtualenvs/django-test/bin/postactivate\nvirtualenvwrapper.user_scripts creating /home/enidev911/.virtualenvs/django-test/bin/get_env_detail\n</code></pre>"},{"location":"configurar-entorno-virtual/#como-eliminar-entornos-virtuales","title":"C\u00f3mo eliminar entornos virtuales","text":"<p>Al ejecutar el comando <code>rmvirtualenv</code> m\u00e1s el nombre del virtualenv, virtualenvwrapper se encarga de borrar el virtualenv con todas los paquetes que hayamos instalado en \u00e9l:</p> bash<pre><code>rmvirtualenv nombre_entorno\n</code></pre>"},{"location":"configurar-una-vista/","title":"Configurar una vista","text":"<p>Una vista es una funci\u00f3n o un m\u00e9todo que b\u00e1sicamente hace dos cosas, toma como argumento un objeto HttpRequest, en el que va la informaci\u00f3n referente a la solicitud que estamos haciendo, como por ejemplo si el m\u00e9todo empleado es <code>POST</code> o <code>GET</code>.</p> <p>Para ver como gestiona Django las vistas, las relaciona con el modelo de datos y env\u00eda esa informaci\u00f3n al navegador vamos a empezar creando una vista sencilla, simplemente vamos a mostrar un mensaje por pantalla:</p> <code>myapp/views.py</code>Explorador views.py<pre><code>from django.http import HttpRequest, HttpResponse\n\ndef first_view(request: HttpRequest) -&gt; HttpResponse:\n    return HttpResponse(\"Hello World!\")\n</code></pre> <pre><code>\uf115 .\n\u251c\u2500\u2500 \ue7c4 db.sqlite3\n\u251c\u2500\u2500 \ue606 manage.py\n\u251c\u2500\u2500 \uf115 myapp\n\u2502   \u251c\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 admin.py\n\u2502   \u251c\u2500\u2500 \ue606 apps.py\n\u2502   \u251c\u2500\u2500 \uf115 migrations\n\u2502   \u2502   \u2514\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 models.py\n\u2502   \u251c\u2500\u2500 \ue606 tests.py\n\u2502   \u2514\u2500\u2500 \ue606 views.py\n\u2514\u2500\u2500 \uea83 mysite\n</code></pre> <p>Ahora tenemos que asociar la vista que acabamos de definir con una direcci\u00f3n, para hacerlo vamos a manejar dos archivos, uno lo crea Django al iniciar el proyecto y est\u00e1 en <code>mysite/urls.py</code>, el otro lo tendremos que crear nosotros dentro del directorio de nuestra aplicaci\u00f3n <code>myapp/urls.py</code></p> <code>mysite/urls.py</code> <code>myapp/urls.py</code>Explorador <pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls'))\n]\n</code></pre> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.first_view, name='first-view'),\n]\n</code></pre> <pre><code>\uf115 .\n\u251c\u2500\u2500 \ue7c4 db.sqlite3\n\u251c\u2500\u2500 \ue606 manage.py\n\u251c\u2500\u2500 \uf115 myapp\n\u2502   \u251c\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 admin.py\n\u2502   \u251c\u2500\u2500 \ue606 apps.py\n\u2502   \u251c\u2500\u2500 \uf115 migrations\n\u2502   \u2502   \u2514\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 models.py\n\u2502   \u251c\u2500\u2500 \ue606 tests.py\n\u2502   \u251c\u2500\u2500 \ue606 urls.py # (1)\n\u2502   \u2514\u2500\u2500 \ue606 views.py\n\u2514\u2500\u2500 \uea83 mysite\n</code></pre> <ol> <li>Este archivo lo creamos manualmente </li> </ol> <p></p> <p>Info</p> <p>A diferencia de los objetos <code>HttpRequest</code> que Django crea autom\u00e1ticamente, los objetos <code>HttpResponse</code> son nuestra responsabilidad.</p> <p>Sigamos y definamos otra vista que brinde informaci\u00f3n sobre la petici\u00f3n realizada:</p> <code>myapp/views.py</code>Explorador views.py<pre><code>def info_request(request: HttpRequest) -&gt; HttpResponse:\n    response = f\"\"\"\n    M\u00e9todo de la solicitud: {request.method}&lt;br /&gt;\n    Esquema de la solicitud: {request.scheme}&lt;br /&gt;\n    Codificaci\u00f3n de la solicitud: {request.encoding}&lt;br /&gt;\n    MIME de la solicitud: {request.content_type}&lt;br /&gt;\n    Tipo de navegador: {request.headers[\"User-Agent\"]}\n    \"\"\"\n    return HttpResponse(response) \n</code></pre> <pre><code>\uf115 .\n\u251c\u2500\u2500 \ue7c4 db.sqlite3\n\u251c\u2500\u2500 \ue606 manage.py\n\u251c\u2500\u2500 \uf115 myapp\n\u2502   \u251c\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 admin.py\n\u2502   \u251c\u2500\u2500 \ue606 apps.py\n\u2502   \u251c\u2500\u2500 \uf115 migrations\n\u2502   \u2502   \u2514\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 models.py\n\u2502   \u251c\u2500\u2500 \ue606 tests.py\n\u2502   \u2514\u2500\u2500 \ue606 views.py\n\u2514\u2500\u2500 \uea83 mysite\n</code></pre> <p>Ahora tenemos que incluir esta vista en el urlpatterns:</p> <code>myapp/urls.py</code>Explorador urls.py<pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.first_view, name='first-view'),\n    path('info/', views.info_request, name='info-request')\n]\n</code></pre> <pre><code>\uf115 .\n\u251c\u2500\u2500 \ue7c4 db.sqlite3\n\u251c\u2500\u2500 \ue606 manage.py\n\u251c\u2500\u2500 \uf115 myapp\n\u2502   \u251c\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 admin.py\n\u2502   \u251c\u2500\u2500 \ue606 apps.py\n\u2502   \u251c\u2500\u2500 \uf115 migrations\n\u2502   \u2502   \u2514\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 models.py\n\u2502   \u251c\u2500\u2500 \ue606 tests.py\n\u2502   \u251c\u2500\u2500 \ue606 urls.py\n\u2502   \u2514\u2500\u2500 \ue606 views.py\n\u2514\u2500\u2500 \uea83 mysite\n</code></pre>"},{"location":"configurar-una-vista/#cargar-una-plantilla-template","title":"Cargar una plantilla (template)","text":"<p>La funci\u00f3n <code>render()</code> toma el objeto de la solicitud (request) como primer argumento, un nombre de plantilla como segundo argumento y un diccionario como tercer argumento opcional.</p>"},{"location":"configurar-una-vista/#definir-una-funcion-que-retorna-un-template","title":"Definir una funci\u00f3n que retorna un template","text":"views.py<pre><code>from django.shortcuts import render\n\ndef first_template(request: HttpRequest) -&gt; HttpResponse:\n    return render(request, 'index.html')\n</code></pre> Crear directorios y archivoExplorador bash<pre><code>mkdir -p myapp/templates\ntouch myapp/templates/index.html\n</code></pre> <pre><code>\uf115 .\n\u251c\u2500\u2500 \uf115 myapp\n\u2502   \u2514\u2500\u2500  \uf115 templates\n\u2502        \u2514\u2500\u2500 \uf13b index.html\n\u2514\u2500\u2500 \uea83 mysite\n</code></pre> <p>Escribimos algo en la plantilla:</p> <code>myapp/templates/index.html</code>Explorador <pre><code>&lt;h1&gt;Hello World!&lt;/h1&gt;\n&lt;h2&gt;From template 'index.html'!&lt;/h2&gt;\n</code></pre> <pre><code>\uf115 .\n\u251c\u2500\u2500 \ue7c4 db.sqlite3\n\u251c\u2500\u2500 \ue606 manage.py\n\u251c\u2500\u2500 \uf115 myapp\n\u2502   \u251c\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 admin.py\n\u2502   \u251c\u2500\u2500 \ue606 apps.py\n\u2502   \u251c\u2500\u2500 \uf115 migrations\n\u2502   \u2502   \u2514\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 models.py\n\u2502   \u251c\u2500\u2500 \uf115 templates\n\u2502   \u2502   \u2514\u2500\u2500 \uf13b index.html\n\u2502   \u251c\u2500\u2500 \ue606 tests.py\n\u2502   \u251c\u2500\u2500 \ue606 urls.py\n\u2502   \u2514\u2500\u2500 \ue606 views.py\n\u2514\u2500\u2500 \uea83 mysite\n</code></pre>"},{"location":"crear-nueva-app/","title":"Crear nueva app","text":"<p>Django distingue entre proyectos y aplicaciones. Una aplicaci\u00f3n es un paquete de Python con una estructura determinada (modelos, vistas, plantillas, etc). Un proyecto es (adem\u00e1s de un paquete de Python) un conjunto de aplicaciones con una configuraci\u00f3n com\u00fan.</p>"},{"location":"crear-nueva-app/#crear-una-nueva-aplicacion","title":"Crear una nueva aplicaci\u00f3n","text":"<p>Una vez generado el proyecto con django-admin abrimos la terminal a la altura del archivo <code>manage.py</code> y ejecutamos el siguiente comando:</p> bash<pre><code>python3 manage.py startapp myapp\n</code></pre> Explorador <pre><code>\uf115 .\n\u251c\u2500\u2500 \ue7c4 db.sqlite3\n\u251c\u2500\u2500 \ue606 manage.py\n\u251c\u2500\u2500 \uf115 myapp\n\u2502   \u251c\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 admin.py\n\u2502   \u251c\u2500\u2500 \ue606 apps.py\n\u2502   \u251c\u2500\u2500 \uf115 migrations\n\u2502   \u2502   \u2514\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 models.py\n\u2502   \u251c\u2500\u2500 \ue606 tests.py\n\u2502   \u2514\u2500\u2500 \ue606 views.py\n\u2514\u2500\u2500 \uf115 mysite\n    \u251c\u2500\u2500 \ue606 __init__.py\n    \u251c\u2500\u2500 \ue606 asgi.py\n    \u251c\u2500\u2500 \ue606 settings.py\n    \u251c\u2500\u2500 \ue606 urls.py\n    \u2514\u2500\u2500 \ue606 wsgi.py\n</code></pre> <p>Luego debemos abrir el archivo <code>mysite/settings.py</code> y registrar la app generada:</p> <p>Explorador</p> <pre><code>\uf115 .\n\u251c\u2500\u2500 \ue7c4 db.sqlite3\n\u251c\u2500\u2500 \ue606 manage.py\n\u251c\u2500\u2500 \uea83 myapp\n\u2514\u2500\u2500 \uf115 mysite\n    \u251c\u2500\u2500 \ue606 __init__.py\n    \u251c\u2500\u2500 \ue606 asgi.py\n    \u251c\u2500\u2500 \ue606 settings.py\n    \u251c\u2500\u2500 \ue606 urls.py\n    \u2514\u2500\u2500 \ue606 wsgi.py\n</code></pre> settings.py<pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp'\n]\n</code></pre>"},{"location":"instalar-django/","title":"Instalar Django","text":""},{"location":"instalar-django/#con-pip-recomendado","title":"Con pip (recomendado)","text":"Instalar \u00faltima versi\u00f3n disponibleInstalar versi\u00f3n espec\u00edfica bash<pre><code>pip3 install django\n</code></pre> bash<pre><code>pip3 install django==3.2\n</code></pre> <p>Podemos comprobar que est\u00e1 instalado Django ejecutando el siguiente comando (el comando comprueba que Python puede encontrar el m\u00f3dulo Django):</p> bash<pre><code>python3 -m django --version\n# 3.2.4\n</code></pre>"},{"location":"instalar-django/#generar-un-nuevo-proyecto","title":"Generar un nuevo proyecto","text":"<p>Para crear un nuevo esqueleto de un sitio llamado \"mysite\" usando la herramienta <code>django-admin</code> como se muestra a continuaci\u00f3n:</p> bash<pre><code>django-admin startproject mysite\ncd mysite\n</code></pre>"},{"location":"instalar-django/#ejecutar-el-servidor-de-desarrollo","title":"Ejecutar el servidor de desarrollo","text":"<p>Para verificar que nuestro proyecto funcione. Cambiamos al directorio del proyecto generado, y dentro ejecutamos el siguiente comando:</p> Ejecutar el servidorSalida bash<pre><code>python manage.py runserver\n</code></pre> <pre><code>Watching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\nJuly 17, 2024 - 03:53:10\nDjango version 4.2.14, using settings 'mysite.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</code></pre> Nota <p>De forma predeterminada, cuando lanzamos el servidor de desarrollo se utiliza el puerto 8000.</p> <p>Si deseamos cambiar el puerto del servidor, lo pasamos como argumento al comando <code>runserver</code>:</p> <pre><code>python manage.py runserver 8080\n</code></pre> Recarga autom\u00e1tica <p>El servidor de desarrollo recarga autom\u00e1ticamente el c\u00f3digo Python para cada solicitud seg\u00fan sea necesario. Sin embargo, algunas cosas como agregar nuevos archivos no activan el reinicio, por lo que tendr\u00edamos que reiniciar el servidor.</p> <p>Si visitamos http://127.0.0.1:8080/ veremos la p\u00e1gina por defecto de nuestro sitio con django.</p> <p></p>"},{"location":"modelos/","title":"Modelos","text":""},{"location":"modelos/#modelos","title":"Modelos","text":"<p>Los modelos en Django forman la piedra angular de las aplicaciones y sirven como un medio sofisticado para definir las tablas de bases de datos y sus relaciones.</p>"},{"location":"modelos/#creacion-de-modelos-de-django","title":"Creaci\u00f3n de modelos de Django","text":"<p>Los modelos en Django son b\u00e1sicamente planos para las tablas de tu base de datos. Cada modelo corresponde a una sola tabla y cada atributo del modelo representa un campo de la tabla.</p> <p>A continuaci\u00f3n veamos un ejemplo como se define un modelo simple en Django:</p> <pre><code>class Product(models.Model):\n    name = models.CharField(max_length=100)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    stock = models.IntegerField()\n</code></pre>"},{"location":"modelos/#implementando-relaciones","title":"Implementando relaciones","text":"<p>Las relaciones son fundamentales para reflejar las asociones del mundo real entre diferentes conjuntos de datos en su base de datos.</p> <p>Los modelos de Django atienden varios tipos de relaciones:</p>"},{"location":"modelos/#uno-a-muchos","title":"Uno a muchos","text":"<p>Se utiliza <code>ForeignKey</code> para vincular varias instancias a una \u00fanica instancia de otro. Por ejemplo, se pueden vincular varios pedidos a un \u00fanico cliente.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/desplegar-django-en-flyio/","title":"Desplegar Django en Fly.io","text":"<p>Desplegar una aplicaci\u00f3n de Django en Fly.io es un proceso relativamente sencillo, pero requiere seguir varios pasos clave para configurar tanto la aplicaci\u00f3n como la infraestructura en Fly.io. Fly.io es una plataforma que permite desplegar aplicaciones globalmente, ofreciendo facilidad para escalar y administrar aplicaciones en contenedores Docker.</p>"},{"location":"blog/desplegar-django-en-flyio/#preparar-la-aplicacion-django","title":"Preparar la aplicaci\u00f3n Django","text":"<p>De forma predeterminada, Django est\u00e1 configurado para el desarrollo local.</p> <ul> <li><code>BASE_URL</code> y <code>ALLOWED_HOSTS</code>: Agregar los dominios donde estar\u00e1 desplegada la aplicaci\u00f3n.</li> <li><code>BASE_DIR</code>: Verifica que las rutas y archivos est\u00e1ticos est\u00e9n bien configurado.</li> </ul> _site/setting.py<pre><code>APP_NAME = os.environ.get(\"FLY_APP_NAME\")\nALLOWED_HOSTS = [f\"{APP_NAME}.fly.dev\"]\n</code></pre> <p>En segundo lugar, instalar Gunicorn como nuestro servidor de producci\u00f3n:</p>  pip pipenv <pre><code>pip install gunicorn\n</code></pre> <pre><code>pipenv install gunicorn\n</code></pre> <p>En tercer lugar, creamos el archivo requirements.txt para que enumere todos los paquetes en el entorno virtual de Python:</p>  pip pipenv <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <pre><code>pipenv requirements &gt; requirements.txt\n</code></pre> <p>Hasta aqu\u00ed, estamos listos para comenzar la implemtaci\u00f3n en Fly.io</p>"},{"location":"blog/desplegar-django-en-flyio/#configurar-e-implementar-la-aplicacion-en-fly","title":"Configurar e implementar la aplicaci\u00f3n en Fly","text":"<p>Para configurar e iniciar la aplicaci\u00f3n, ejecutamos el comando <code>fly launch</code> y seguimos las instrucciones del asistente:</p> <ul> <li>Nombre para la aplicaci\u00f3n: establece el nombre que tendr\u00e1 la aplicaci\u00f3n en Fly.io</li> <li>Regi\u00f3n principal: la regi\u00f3n donde actuan los servidores, es detectado autom\u00e1ticamente en la mayor\u00eda de los casos.</li> </ul> <p>Esto crea dos nuevos archivos en el proyecto que se configuran autom\u00e1ticamente en un archivo </p> <ul> <li>Archivos est\u00e1ticos y de media: Los archivos est\u00e1ticos y de media, debemos asegurarnos de configurarlos para que se sirvan correctamente en producci\u00f3n, usando servicios como <code>whitenoise</code> para servir los archivos est\u00e1ticos de manera eficiente.</li> </ul>  pip pipenv <pre><code>pip install whitenoise\n</code></pre> <pre><code>pipenv install whitenoise\n</code></pre>  pip pipenv <pre><code>pip install psycopg-binary\n</code></pre> <pre><code>pipenv install psycopg-binary\n</code></pre> <p>Finalmente para implementar la aplicaci\u00f3n utilizamos el siguiente comando:</p> terminal<pre><code>fly deploy\n</code></pre> <p>Esto tardar\u00e1 unos segundos o minutos mientras carga la aplicaci\u00f3n:</p> terminal<pre><code>Validating ~/project-django/fly.toml\n\u2713 Configuration is valid\n--&gt; Verified app config\n==&gt; Building image\n==&gt; Building image with Depot\n--&gt; build:  (\u200b)\n[+] Building 16.4s (14/15)   \n</code></pre>"},{"location":"blog/django-formularios/","title":"Django formularios","text":"<p>En Django, un formulario es una clase que representa un formulario HTML en una aplicaci\u00f3n web. Los formularios se suelen utilizar para recolectar datos del usuario y validar la entrada antes de procesarla. Django proporciona un marco robusto para trabajar con formularios, simplificando la creaci\u00f3n, validaci\u00f3n y procesamiento de datos.</p>"},{"location":"blog/django-formularios/#formas-de-crear-formularios-en-django","title":"Formas de crear formularios en Django","text":"<p>Django facilita la creaci\u00f3n de formularios mediante dos m\u00e9todos principales:</p> <ul> <li>formularios de Django (para prop\u00f3sito general)</li> <li>formularios de modelo (basados en un modelo de la aplicaci\u00f3n)</li> </ul> <p>Ambos m\u00e9todos permiten definir y manejar formularios, pero tienen diferencias en su enfoque y prop\u00f3sito.</p>"},{"location":"blog/django-formularios/#formularios-de-django-formsform","title":"Formularios de Django (<code>forms.Form</code>)","text":"<p>Este enfoque como se mencionaba es de prop\u00f3sito general y se suele utilizar cuando necesitas un formulario que no est\u00e9 directamente relacionado con un modelo de la base de datos. Veamos un ejemplo de formulario de contacto.</p>"},{"location":"blog/django-formularios/#definir-un-formulario-de-contacto","title":"Definir un formulario de contacto","text":"<p>En un archivo <code>forms.py</code> en la aplicaci\u00f3n Django definimos el siguiente formulario:</p> <pre><code>from django import forms\n\nclass ContactForm(forms.Form):\n\n    name = forms.CharField(label='Nombre', max_length=100) #(1)!\n    email = forms.EmailField(label='Correo electr\u00f3nico') #(2)!\n    message = forms.CharField(label='Mensaje', widget=forms.Textarea) #(3)!\n</code></pre> <ol> <li>Aqu\u00ed <code>CharField</code> es un campo b\u00e1sico que corresponde a una entrada de texto.</li> <li>Aqu\u00ed <code>EmailField</code> es un campo b\u00e1sico que corresponde a una entrada de texto para emails.</li> <li>Aqu\u00ed <code>CharField</code> con el argumento <code>widget=forms.Textarea</code> har\u00e1 que se renderice un \u00e1rea de texto en lugar de un campo de entrada de una sola l\u00ednea.</li> </ol>"},{"location":"blog/django-formularios/#usar-el-formulario-en-la-vista","title":"Usar el formulario en la vista","text":"<p>Ahora en el archivo <code>views.py</code> de la aplicaci\u00f3n Django, creamos la instancia del formulario y se pasa al contexto del template:</p> views.py<pre><code>from .forms import ContactForm\n\ndef contact_view(request):\n    if request.method == \"POST\":\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            # Aqu\u00ed se procesan los datos\n            print(form.cleaned_data)\n    else:\n        form = ContactForm()\n    return render(request, 'contact.html', {'form':form})\n</code></pre>"},{"location":"blog/django-formularios/#crear-la-plantilla-para-el-formulario","title":"Crear la plantilla para el formulario","text":"<p>En un archivo <code>contact.html</code> en la subcarpeta templates de la aplicaci\u00f3n Django mostramos el formulario:</p> templates/contact.html<pre><code>&lt;form method=\"post\"&gt;\n    {% csrf_token %}\n    {{ form.as_p }}&lt;!-- (1)! --&gt;\n    &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <ol> <li><code>{{ form.as_p }}</code> renderiza el formulario con cada campo envuelto en un p\u00e1rrafo HTML</li> </ol>"},{"location":"blog/django-formularios/#formularios-de-modelo-formsmodelform","title":"Formularios de Modelo (<code>forms.ModelForm</code>)","text":"<p>Este enfoque se utiliza cuando deseas un formulario basado en un modelo de Django. Simplifica la creaci\u00f3n de formularios para agregar o editar instancias de un modelo.</p>"},{"location":"blog/django-formularios/#definir-un-formulario-para-un-modelo-comentario","title":"Definir un formulario para un modelo comentario","text":"forms.py<pre><code>from django import forms\nfrom .models import Comment\n\nclass CommentForm(forms.ModelForm):\n    model = Comment\n    fields = ['content']\n</code></pre>"},{"location":"blog/django-login-and-logout-tutorial/","title":"Django login y logout","text":"<p>En este art\u00edculo, aprenderemos a configurar el sistema completo de autenticaci\u00f3n de usuarios en Django que consta de inicio de sesi\u00f3n, cierre de sesi\u00f3n, registro, cambio de contrase\u00f1a y restablecimiento de contrase\u00f1a.</p>"},{"location":"blog/django-login-and-logout-tutorial/#crear-un-proyecto-de-django","title":"Crear un proyecto de Django","text":"<p>Con un entorno virtual configurado y activado y Django instalado, ahora puedes generar un nuevo proyecto:</p> terminal<pre><code>django-admin startproject django_contrib_auth\n</code></pre> <p>Recuerda</p> <p>Para configurar un entorno virtual y comenzar a trabajar con el framework Django, tienes el cap\u00edtulo \"Comenzar\" en este sitio web.</p> <p>Al ejecutarse el comando se crea una estructura de carpetas predeterminada, que incluye algunos archivos de Python y su aplicaci\u00f3n de administraci\u00f3n que tiene el mismo nombre que su proyecto:</p> <pre><code>\uf115 django_contrib_auth #(1)!\n\u251c\u2500\u2500 \uf115 django_contrib_auth #(2)!\n\u2502   \u251c\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 asgy.py\n\u2502   \u251c\u2500\u2500 \ue606 settings.py\n\u2502   \u251c\u2500\u2500 \ue606 urls.py\n\u2502   \u2514\u2500\u2500 \ue606 wsgy.py\n\u2514\u2500\u2500 \ue606 manage.py #(3)!\n</code></pre> <ol> <li>Es la carpeta de proyecto de nivel superior.</li> <li>Es la carpeta de nivel inferior que representa su aplicaci\u00f3n de administraci\u00f3n.</li> <li>Es un script Python que funciona como centro de comando de su proyecto.</li> </ol> <p>Cuando generamos un proyecto predeterminado utilizando el comando <code>startproject</code> en Django tenemos habilitado solamente el sitio administrador que lo podemos ver visitando la URL <code>/admin/</code> una vez corremos el comando <code>runserver</code>.</p> <p></p> <p>De forma predeterminada, para iniciar sesi\u00f3n en el administrador es necesario que un usuario tenga el atributo <code>is_staff</code> en <code>True</code> pero no podr\u00e1 realizar acciones si no tiene los permisos correspondientes para dichas acciones sobre las aplicaciones que se agreguen.</p> <p>Para poder iniciar sesi\u00f3n, podemos utilizar el comando <code>createuser</code> pero antes debemos correr la migraci\u00f3n inicial con el comando <code>python manage.py migrate</code>. El siguiente ejemplo muestra como crear el superusuario:</p> bash output  <pre><code>python manage.py createsuperuser\n</code></pre> <pre><code>Username: johndoe\nEmail address: johndoe@dummymail.com\nPassword:\nPassword (again):\nThis password is too short. It must contain at least 8 characters.\nThis password is too common.\nThis password is entirely numeric.\nBypass password validation and create user anyway? [y/N]: y\nSuperuser created successfully.\n</code></pre> <p>El m\u00f3dulo <code>contrib</code> de Django ofrece aplicaciones integradas para ayudar con el desarrollo. En el archivo <code>settings.py</code> buscaremos la lista de <code>INSTALLED_APPS</code> y vas a encontrar que <code>auth</code> ya se encuentra disponible para nosotros:</p> settings.pyexplorador <pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n</code></pre> <pre><code>\uf115 django_contrib_auth\n\u2514\u2500\u2500 \uf115 django_contrib_auth\n    \u251c\u2500\u2500 \ue606 __init__.py\n    \u251c\u2500\u2500 \ue606 asgi.py\n    \u251c\u2500\u2500 \ue606 settings.py\n    \u251c\u2500\u2500 \ue606 urls.py\n    \u2514\u2500\u2500 \ue606 wsgi.py\n</code></pre> <p>Para usar la aplicaci\u00f3n <code>auth</code>, debemos agregarla a nuestro <code>urls.py</code> a nivel del proyecto. En la parte superior, importamos <code>include</code> y agregamos una nueva URL en <code>accounts/</code> ya que este nombre es una pr\u00e1ctica est\u00e1ndar y requiere menos personalizaci\u00f3n m\u00e1s adelante:</p> urls.pyexplorador <pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"accounts/\", include(\"django.contrib.auth.urls\"))\n]\n</code></pre> <pre><code>\uf115 django_contrib_auth\n\u2514\u2500\u2500 \uf115 django_contrib_auth\n    \u251c\u2500\u2500 \ue606 __init__.py\n    \u251c\u2500\u2500 \ue606 asgi.py\n    \u251c\u2500\u2500 \ue606 settings.py\n    \u251c\u2500\u2500 \ue606 urls.py\n    \u2514\u2500\u2500 \ue606 wsgi.py\n</code></pre> <p>La aplicaci\u00f3n <code>auth</code> nos proporciona multiples vistas de autenticaci\u00f3n y URL para gestionar el inicio de sesi\u00f3n, cierre de sesi\u00f3n, cambio de contrase\u00f1a, restablecimiento de contrase\u00f1a, etc. Notablemente, no incluye una vista y URL para el registro, por lo que debemos configurarlo nosotros mismos:</p> Ruta M\u00e9todo Name Descripci\u00f3n <code>accounts/login/</code> <code>GET</code> <code>[name='login']</code> Inicio de sesi\u00f3n Login <code>accounts/logout/</code> <code>GET</code> <code>[name='logout']</code> Cierre de sesi\u00f3n Logout <code>accounts/password_change/</code> <code>GET</code> <code>[name='password_change']</code> Cambio de contrase\u00f1a <code>accounts/password_change/done/</code> <code>GET</code> <code>[name='password_change_done']</code> P\u00e1gina de cambio de contrase\u00f1a exitoso <code>accounts/password_reset/</code> <code>GET</code> <code>[name='password_reset']</code> P\u00e1gina para resetear la contrase\u00f1a <p>Una vez hecho lo anterior, ponemos en marcha el servidor y visitamos la URL http://127.0.0.1:8080/accounts/login/ ocurrir\u00e1 que se nos mostrar\u00e1 el siguiente error:</p> <p></p> <p>Lo anterior se debe a que Django no encuentra ninguna plantilla para mostrar, pero nos indica la ubicaci\u00f3n predeterminada de la plantilla de inicio de sesi\u00f3n que es <code>registration/login.html</code>.</p>"},{"location":"blog/django-login-and-logout-tutorial/#pagina-de-inicio-de-sesion","title":"P\u00e1gina de inicio de sesi\u00f3n","text":"<p>De manera predeterminada. Django buscar\u00e1 dentro de un carpeta <code>templates</code> una subcarpeta llamada <code>registration</code>. La plantilla de inicio de sesi\u00f3n se llama <code>login.html</code>.</p> <p>Como no hemos configurado ninguna aplicaci\u00f3n, vamos a\u00f1adir a la configuraci\u00f3n una l\u00ednea para que se pueda buscar en la ra\u00edz del proyecto las plantillas y asi evitar generar una nueva aplicaci\u00f3n. Buscamos en el archivo <code>settings.py</code> la variables <code>TEMPLATES</code> y modificamos lo siguiente:</p> settings.py<pre><code>TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n</code></pre> <p>Luego se crean esas carpetas y el archivo, nos debe quedar la estructura de carpeta de la siguiente forma:</p> <pre><code>\uf115 django_contrib_auth\n\u251c\u2500\u2500 \uf115 django_contrib_auth\n\u2502   \u251c\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 asgi.py\n\u2502   \u251c\u2500\u2500 \ue606 settings.py\n\u2502   \u251c\u2500\u2500 \ue606 urls.py\n\u2502   \u251c\u2500\u2500 \ue606 views.py\n\u2502   \u2514\u2500\u2500 \ue606 wsgi.py\n\u251c\u2500\u2500 \uf115 templates\n\u2502   \u2514\u2500\u2500 \uf115 registration\n\u2502       \u2514\u2500\u2500 \uf13b login.html\n\u251c\u2500\u2500 \ue7c4 db.sqlite3\n\u2514\u2500\u2500 \ue606 manage.py\n</code></pre> <p>Ahora si a\u00f1adimos lo siguiente, podemos renderizar la p\u00e1gina de inicio de sesi\u00f3n:</p> login.html<pre><code>&lt;h2&gt;Iniciar sesi\u00f3n&lt;/h2&gt;\n&lt;form method=\"post\"&gt;\n  {% csrf_token %} &lt;!--(1)!--&gt;\n  {{ form.as_p }} &lt;!--(2)!--&gt;\n  &lt;button type=\"submit\"&gt;Ingresar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <ol> <li>Se a\u00f1ade por cuestiones de seguridad</li> <li>EL contenido del formulario se almacena en <code>{{ form }}</code></li> </ol> <p></p> <p>Nuestra funci\u00f3n de inicio de sesi\u00f3n ahora funciona, pero debemos especificar a d\u00f3nde redirigir al usuario luego de iniciar sesi\u00f3n correctamente mediante <code>LOGIN_REDIRECT_URL</code> en la configuraci\u00f3n. En la parte superior del archivo <code>settings.py</code> agregamos lo siguiente:</p> settings.py<pre><code>from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nLOGIN_REDIRECT_URL = \"/\"\n</code></pre> <p>Solo podemos iniciar sesi\u00f3n si tenemos una cuenta de usuario. Y como todav\u00eda falta a\u00f1adir un formulario de registro, el \u00fanico usuario es el superusuario que creamos desde la l\u00ednea de comandos.</p> <p>Aprovechando la herencia de plantillas del motor de plantillas de Django podemos agregar una sencilla navegaci\u00f3n en un archivo <code>base.html</code> en la carpeta <code>templates</code>:</p> templates/base.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;title&gt;{% block title %}Bienvenido{% endblock %}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;main&gt;\n        &lt;ul class=\"menu\"&gt;\n            &lt;li&gt;&lt;a href=\"{% url 'login' %}\"&gt;Iniciar sesi\u00f3n&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"{% url '/accounts/signup' %}\"&gt;Registrarse&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;div id=\"content\"&gt;\n            {% block content %}{% endblock %}\n        &lt;/div&gt;\n    &lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Luego abrimos nuevamente  <code>templates/registration/login.html</code> y a\u00f1adimos lo siguiente:</p> templates/registration/login.html<pre><code>{% extends \"base.html\" %}\n{% block content %}\n&lt;h2&gt;Iniciar sesi\u00f3n&lt;/h2&gt;\n&lt;form method=\"post\"&gt;\n  {% csrf_token %} \n  {{ form.as_p }} \n  &lt;button type=\"submit\"&gt;Ingresar&lt;/button&gt;\n&lt;/form&gt;\n{% endblock %}\n</code></pre>"},{"location":"blog/django-login-and-logout-tutorial/#boton-de-cerrar-sesion","title":"Bot\u00f3n de cerrar sesi\u00f3n","text":"<p>Uno de los cambios de Django 5.0, como se indica en las notas de la versi\u00f3n, es la eliminaci\u00f3n de la compatibilidad con el cierre de sesi\u00f3n mediante solicitudes <code>GET</code>. En versiones anteriores de Django, se pod\u00eda agregar un enlace de cierre de sesi\u00f3n como el siguiente ejemplo:</p> HTML<pre><code>&lt;a href=\"{% url 'logout' %}\"&gt;Log Out&lt;/a&gt;\n</code></pre>"},{"location":"blog/django-login-and-logout-tutorial/#pagina-de-registro","title":"P\u00e1gina de registro","text":"<p>Ahora que hemos resuelto el tema de inicio y cierre de sesi\u00f3n, podemos agregar la p\u00e1gina de registro al sitio b\u00e1sico de Django. Si recordamos Django no proporciona una vista o URL integrada para esto.</p> <p>La forma m\u00e1s sencilla de implementar el registro de un usuario es utilizar <code>UserCreationForm</code> tal como est\u00e1. Esta estrategia es adecuada en caso de que est\u00e9 utilizando el usuario predeterminado de Django, utilice el nombre de usuario para autenticarse y solo est\u00e9 interesado en configurar el nombre de usuario y contrase\u00f1a al registrarse. En el siguiente bloque podemos alternar entre las tabs y ver el contenido de los archivos involucrados:</p>  urls.py views.py signup.html django_contrib_auth/urls.py<pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"accounts/\", include(\"django.contrib.auth.urls\")),\n    path(\"accounts/signup\", signup, name='signup'),\n]\n</code></pre> django_contrib_auth/views.py<pre><code>from django.contrib.auth import login, authenticate\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth.forms import UserCreationForm\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            form.save() #(1)!\n            username = form.cleaned_data.get('username')\n            raw_password = form.cleaned_data.get('password1')\n            user = authenticate(username=username, password=raw_password)\n            login(request, user)\n            return redirect('index') #(2)!\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n</code></pre> <ol> <li>Se guarda al usuario en la base de datos.</li> <li>Redirigimos al usuario una vez autenticado a la p\u00e1gina de inicio.</li> </ol> templates/registration/signup.html<pre><code>{% extends \"base.html\" %}\n\n{% block content %}\n&lt;h2&gt;Registrarse&lt;/h2&gt;\n&lt;form action=\"post\"&gt;\n    {% csrf_token %}\n    {{ form.as_p }}\n    &lt;button type=\"submit\"&gt;Crear&lt;/button&gt;\n&lt;/form&gt;\n{% endblock %}\n</code></pre> <p>B\u00e1sicamente, lo que estamos haciendo es manejar el procesamieto de <code>UserCreationForm</code>. Una vez que el c\u00f3digo llega a <code>form.save()</code>, se crea el usuario. Pero aqu\u00ed debemos dar un paso m\u00e1s, y es autenticar al usuario para luego redirigir al usuario a la p\u00e1gina de inicio de sesi\u00f3n, pero realizar la autenticaci\u00f3n es bueno para la experiencia del usuario.</p> <p>Para realizar la autenticaci\u00f3n, necesitamos obtener la contrase\u00f1a sin procesar de la entrada que proviene de <code>POST</code>.</p> <p>Si la funci\u00f3n <code>authenticate()</code> se ejecuta correctamente (en este casom siempre devolver\u00e1 un resultado positivo), se crear\u00e1 una instancia de usuario (es decir, el nombre de usuario y la contrase\u00f1a coinciden), y ahora podemos iniciar sesi\u00f3n de forma segura. Para ello, llamamos a la funci\u00f3n <code>login()</code> y pasamos la solicitud (<code>request</code>) y la instancia de usuario como par\u00e1metro. Despu\u00e9s de eso, simplemente redirigimos al usuario a donde queramos.</p> <p>Si deseamos tener m\u00e1s control sobre el formulario <code>signup.html</code>, podemos extraer los campos en un bucle <code>for</code>:</p> templates/registration/signup.html<pre><code>{% extends \"base.html\" %}\n{% block content %}\n&lt;h2&gt;Registro&lt;/h2&gt;\n&lt;form method=\"post\"&gt;\n    {% csrf_token %}\n    {% for field in form %}\n    &lt;p&gt;\n        {{ field.label_tag }}&lt;br&gt;\n        {{ field }}&lt;br&gt;\n        {% if field.help_text %}\n            &lt;small style=\"color: grey\"&gt;{{ field.help_text }}&lt;/small&gt;\n        {% endif %}\n        {% for error in field.errors %}\n            &lt;p style=\"color: red\"&gt;{{ error }}&lt;/p&gt;\n        {% endfor %}\n    &lt;/p&gt;\n    {% endfor %}\n    &lt;button type=\"submit\"&gt;Crear&lt;/button&gt;\n&lt;/form&gt;\n{% endblock %}\n</code></pre>"},{"location":"blog/django-login-and-logout-tutorial/#pagina-de-registro-con-campos-adicionales","title":"P\u00e1gina de registro con campos adicionales","text":"<p>Entonces, \u00bfqu\u00e9 pasa si tambi\u00e9n quiero obtener la direcci\u00f3n de correo electr\u00f3nico y el nombre completo del usuario al registrarse?</p> <p>Esta estrategia funcionar\u00e1 si est\u00e1s usando el usuario de Django tal como est\u00e1 o si lo hemos ampliado usando <code>AbstractUser</code> o <code>AbstractBaseUser</code>.</p> <p>Ahora necesitamos un paso m\u00e1s, tenemos que ampliar el <code>UserCreationForm</code>:</p> django_contrib_auth/forms.py<pre><code>from django import forms\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\nclass SignUpForm(UserCreationForm):\n    first_name = forms.CharField(max_length=30, required=False, help_text='Opcional.')\n    last_name = forms.CharField(max_length=30, required=False, help_text='Opcional.')\n    email = forms.EmailField(max_length=254, help_text='Requerido. Debe ser una direcci\u00f3n de correo v\u00e1lida')\n\n    class Meta:\n        model = User\n        fields = ('username', 'first_name', 'last_name', 'email', 'password1', 'password2', )\n</code></pre> <p>Ahora, en la vista, simplemente cambiamos la clase de formulario para usar nuestro nuevo <code>SignUpForm</code>:</p> django_contrib_auth/views.py<pre><code>from django.contrib.auth import login, authenticate\nfrom django.shortcuts import render, redirect\nfrom .forms import SignUpForm #(1)!\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            form.save()\n            username = form.cleaned_data.get(\"username\")\n            raw_password = form.cleaned_data.get(\"password1\")\n            user = authenticate(username=username, password=raw_password)\n            login(request, user)\n            return redirect('index')\n    else:\n        form = SignUpForm()\n    return render(request, \"registration/signup.html\", {\"form\": form})\n</code></pre> <ol> <li>Importamos la clase de formulario</li> </ol> <p>Se ver\u00e1 as\u00ed, si es que le agregamos algunas reglas de estilos:</p> <p></p>"},{"location":"blog/django-variables-de-entorno/","title":"Django variables de entorno","text":"<p>Recuerda que cada aplicaci\u00f3n web que desarrolles, probablemente se va a ejecutar en m\u00e1s de un entorno (tanto locales, como en producci\u00f3n). Y necesitar\u00e1s cambiar algunos par\u00e1metros para que funcione correctamente. Por ejemplo, cuando estas desarrollando localmente necesitas que los par\u00e1metros de base de datos est\u00e9n vinculados a la base de datos local y que el <code>DEBUG</code> este en <code>True</code>. Pero cuando vas a desplegarlo necesitas cambiar, otra vez, estos par\u00e1metros. Cambiar el <code>DEBUG</code> a <code>False</code> y cambiar los valores de la base de datos.</p>"},{"location":"blog/django-variables-de-entorno/#crear-variables-de-entorno","title":"Crear variables de entorno","text":"<p>Crea un archivo <code>.env</code> en la ra\u00edz del proyecto. Ah\u00ed agregaremos nuestras variables de entorno y a\u00f1adir el archivo al <code>.gitignore</code></p> <code>.env</code> <code>.gitignore</code> <pre><code>SECRET_KEY=django-in$%..$%...\nDEBUG=True\nDB_NAME=tiendaonline\nDB_USER=postgres\nDB_PASSWORD=post123\nDB_HOST=localhost\nALLOWED_HOSTS=127.0.0.1, localhost\n</code></pre> <pre><code>.env\n</code></pre>"},{"location":"blog/django-variables-de-entorno/#instalacion-de-python-decouple","title":"Instalaci\u00f3n de Python Decouple","text":"<p>Primero se instala la biblioteca con pip:</p> <pre><code>pip install python-decouple\n</code></pre>"},{"location":"blog/objetos-request-y-response/","title":"Objetos request y response","text":"<p>Cuando trabajamos con Django, nos enfrentamos constantemente a dos objetos fundamentales: <code>request</code> y <code>response</code>. Estos son los componentes que permiten la interacci\u00f3n entre el navegador del usuario y el servidor web. En este post, vamos a desglosar qu\u00e9 son estos objetos, como funcionan, etc.</p>"},{"location":"blog/objetos-request-y-response/#que-es-el-objeto-request-en-django","title":"\u00bfQu\u00e9 es el objeto request en Django?","text":"<p>El objeto <code>request</code> es una instancia de la clase <code>HttpRequest</code> y contiene toda la informaci\u00f3n sobre una solicitud HTTP que el cliente (el navegador del usuario) env\u00eda al servidor. Este objeto es accesible dentro de las vistas de Django y te proporciona todos los datos que necesitas sobre la petici\u00f3n, como los par\u00e1metros de la URL, las cabeceras HTTP, el m\u00e9todo HTTP utilizado (GET, POST, etc.), y los datos enviados por el usuario.</p> Ciclo B\u00e1sico de una Request en Django <pre><code>graph TD\n    A[\"Cliente (Navegador)\"] --&gt;|Env\u00eda solicitud HTTP| B[Servidor Django]\n    B --&gt; C[Django obtiene la vista correspondiente]\n    C --&gt; D[Se crea el objeto Request]\n    D --&gt; E[La vista procesa la Request]\n    E --&gt; F[Genera el objeto Response]\n    F --&gt; G[\"Devuelve la respuesta (objeto Response) al Cliente\"]\n    G --&gt; A</code></pre>"},{"location":"blog/objetos-request-y-response/#atributos-comunes-del-objeto-request","title":"Atributos comunes del objeto request","text":"<ul> <li> <p><code>request.method</code></p> <p>Es el m\u00e9todo HTTP utilizado en la solicitud. Puede ser <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, etc. Ejemplo<pre><code>if request.method == \"POST\":\n    # Realiza algo con los datos enviados a trav\u00e9s de un formulario\n</code></pre></p> </li> <li> <p><code>request.GET</code></p> <p>Un diccionario que contiene los par\u00e1metros de consulta de la URL (para solucitudes GET). Es \u00fatil cuando tienes formularios o enlaces con par\u00e1metros en la URL.  Ejemplo<pre><code># Si la URL es /search/?q=django\nsearch_query = request.GET['q'] # 'django'\n</code></pre></p> </li> <li> <p><code>request.POST</code></p> <p>Un diccionario que contiene los datos enviados en el cuerpo de la solicitud para las solicitudes <code>POST</code>. Este atributo se usa com\u00fanmente para procesar datos de formularios.  Ejemplo<pre><code># Si el formulario tiene un campo 'username'\nusername = request.POST['username']\n</code></pre></p> </li> <li> <p><code>request.path</code></p> <p>El path de la URL de la solicitud. Esto incluye la ruta despu\u00e9s del dominio, por ejemplo, <code>/home/</code> o <code>/profile/123</code>. Ejemplo<pre><code>print(request.path)  # '/home/'\n</code></pre></p> </li> <li> <p><code>request.FILES</code></p> <p>Un diccionario que contiene los archivos enviados a trav\u00e9s de un formulario. Esto es \u00fatil para manejar cargas de archivos. Ejemplo<pre><code>uploaded_file = request.FILES['document']\n</code></pre></p> </li> <li> <p><code>request.user</code></p> <p>Un atributo muy \u00fatil cuando est\u00e1s trabajando con autenticaci\u00f3n de usuarios. Contiene el usuario autenticado si se ha iniciado sesi\u00f3n, o <code>AnonymousUser</code> si no lo est\u00e1. Ejemplo<pre><code>if request.user.is_authenticated:\n    print(\"Usuario autenticado\")\n</code></pre></p> </li> </ul>"},{"location":"blog/objetos-request-y-response/#que-es-el-objeto-response-en-django","title":"\u00bfQu\u00e9 es el objeto response en Django?","text":"<p>As\u00ed como tenemos un objeto <code>request</code>, tambi\u00e9n tenemos un objeto <code>response</code> que es instancia de la clase <code>HttpResponse</code> y contiene la respuesta que Django env\u00eda de vuelta al cliente despu\u00e9s de procesar la solicitud. Es lo que se utiliza generalmente como resultado de la vista y lo env\u00eda al navegador del usuario.</p> Generaci\u00f3n de una Response en Django <pre><code>graph TD\n    A[Vista procesando la Request] --&gt; B[Generar contenido para la Response]\n    B --&gt; C[\"Configurar c\u00f3digo de estado HTTP (200, 404, etc.)\"]\n    C --&gt; D[\"Establecer cookies (si es necesario)\"]\n    D --&gt; E[\"Establecer cabeceras (X-Frame-Options, etc.)\"]\n    E --&gt; F[Enviar la Response al Cliente]\n    F --&gt; G[Cliente recibe y procesa la Response]</code></pre>"},{"location":"blog/objetos-request-y-response/#atributos-y-metodos-comunes-del-objeto-response","title":"Atributos y m\u00e9todos comunes del objeto response","text":"<ul> <li> <p><code>response.content</code></p> <p>El contenido de la respuesta, normalmente el HTML que ser\u00e1 mostrado en el navegador. Este atributo puede ser utilizado para manipular el contenido antes de que env\u00ede al cliente. Ejemplo<pre><code>response = HttpResponse(\"Hello, world!\")\nprint(response.content)  # b'Hello, world!'\n</code></pre></p> </li> <li> <p><code>response.status_code</code></p> <p>El c\u00f3digo de estado HTTP de la respuesta. Por ejemplo, <code>200</code> para una respuesta exitosa, <code>404</code> para no encontrado, <code>500</code> para error interno, etc. Ejemplo<pre><code>response.status_code = 404  # C\u00f3digo de error para p\u00e1gina no encontrada\n</code></pre></p> </li> <li> <p><code>redirect</code></p> <p>Este m\u00e9todo se utiliza para redirigir al usuario a otra URL. Se usa frecuentemente para redirigir despu\u00e9s de una operaci\u00f3n exitosa, como al enviar un formulario o iniciar sesi\u00f3n. Ejemplo<pre><code>from django.shorcuts import redirect\nreturn redirect('success_page')\n</code></pre></p> </li> <li> <p><code>response['Header-Name']</code></p> <p>Puedes establecer cabeceras HTTP personalizadas en la respuesta. Por ejemplo, agregar un tipo de contenido espec\u00edfico o configurar cabeceras de seguridad. Ejemplo<pre><code>response['X-Frame-Options'] = 'DENY'\n</code></pre></p> </li> </ul>"},{"location":"blog/shell-de-django-orm-y-querysets/","title":"Shell de Django, ORM y QuerySets","text":"<p>El shell de Django nos permite escribir declaraciones de Python desde la l\u00ednea de comandos para interactuar con el proyecto de Django.</p> <p>Tip</p> <p>El shell de Django es muy potente, pero muchos desarrolladores principiantes subestiman su utilidad en el proceso de desarrollo y depuraci\u00f3n.</p>"},{"location":"blog/shell-de-django-orm-y-querysets/#que-es-esto-de-django-shell","title":"\u00bfQu\u00e9 es esto de Django Shell?","text":"<p>El shell de Django es una interfaz de l\u00ednea de comandos interactivo que combina la funcionalidad del framework Django con el shell de Python, iPython, bPython (estos dos \u00faltimos, se deben instalar por aparte en la mayor\u00eda de los casos). El shell de Django carga los par\u00e1metros y las configuraciones espec\u00edficas del proyecto, lo que permite aislar el entorno de trabajo y centrarse en el proyecto en particular.</p> <p>Una de las principales funciones que ofrece este shell es el f\u00e1cil acceso al mapeador relacional de objetos (ORM), que permite al desarrollador interactuar directamente con la base de datos. El ORM es responsable de realizar consultas a la base de datos dentro de un proyecto de Django. El mapeador relacional de objetos reduce la necesidad de un amplio conocimiento de las bases de datos relacionales y elimina la necesidad de utilizar consultas SQL dentro del proyecto en la mayor\u00eda de los casos.</p>"},{"location":"blog/shell-de-django-orm-y-querysets/#accediendo-al-shell-de-django","title":"Accediendo al Shell de Django","text":"<p>Se puede acceder al shell de Django mediante el comando <code>shell</code> en un proyecto de Django. Por ende es necesario tener un proyecto Django.</p>"},{"location":"blog/shell-de-django-orm-y-querysets/#crear-un-nuevo-proyecto","title":"Crear un nuevo proyecto","text":"<p>Si no tienes un proyecto creado y a\u00fan no tienes Django instalado, podemos realizar los siguietes pasos para generar uno nuevo:</p> <p>1. Crear un nuevo directorio para el proyecto</p> <p>Elige un destino para tu proyecto y luego crea un nuevo directorio con el nombre para el proyecto:</p> terminal<pre><code>mkdir prueba-shell-django &amp;&amp; cd prueba-shell-django\n</code></pre> Info <p>Modifica el nombre por el que desees, el comando anterior simplemente est\u00e1 creando un nuevo directorio y entrando en ese directorio a la vez. En distribuciones basadas en Linux, el comando anterior se puede abreviar con <code>take prueba-shell-django</code></p> <p>2. Crear un entorno virtual</p> <p>Existen muchas maneras de crear un entorno virtual, para efectos pr\u00e1cticos haremos uso del paquete venv incluido en la mayor\u00eda de instalaciones de Python:</p> terminal<pre><code>python3 -m venv venv\n</code></pre> <p>3. Activar entorno virtual</p> <p>Una vez se crea el entorno virtual, observar\u00e1s que se cre\u00f3 una nueva carpeta con el nombre de venv y dentro se encuentra una instalaci\u00f3n limpia de Python que tenemos que activar para empezar a instalar los paquetes. Para ello debemos ejecutar el comando que corresponda seg\u00fan el sistema operativo que utilices:</p>  Linux, macOS Windows <pre><code>source venv/bin/activate\n</code></pre> <pre><code>.venv\\Scripts\\activate\n</code></pre> <p>4. Instalar Django</p> <p>Ahora que ya tenemos el entorno virtual creado y activado, podemos instalar django usando pip:</p> terminal<pre><code>pip install django\n</code></pre> <p>5. Generar un nuevo proyecto de django</p> <p>Una vez instalado django, procedemos a generar un nuevo proyecto en el directorio actual:</p> terminal<pre><code>django-admin startproject _site .\n</code></pre> <p>Una vez generado el proyecto, tendr\u00e1s disponible el archivo <code>manage.py</code> en el proyecto:</p> Archivos del proyecto<pre><code>\uf115 prueba-shell-django\n\u251c\u2500\u2500 \uea83 venv\n\u251c\u2500\u2500 \ue606 manage.py\n\u2514\u2500\u2500 \uf115 mysite\n    \u251c\u2500\u2500 \ue606 __init__.py\n    \u251c\u2500\u2500 \ue606 asgi.py\n    \u251c\u2500\u2500 \ue606 settings.py\n    \u251c\u2500\u2500 \ue606 urls.py\n    \u2514\u2500\u2500 \ue606 wsgi.py\n</code></pre> <p>Ahora podemos ejecutar el siguiente comando para ingresar al shell de Django:</p> terminal<pre><code>python manage.py shell\n</code></pre> Info <p>Si tenemos <code>ipython</code> o <code>bpython</code> instalado, se ingresa de la siguiente manera: ipython<pre><code>python manage.py shell -i ipython\n</code></pre> bpython<pre><code>python manage.py shell -i bpython\n</code></pre></p> <p>Ahora podemos observar que la terminal entra en modo interactivo, invitandonos a escribir nuevas instrucciones:</p>  shell python shell bpython shell ipython <pre><code>Python 3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n&gt;&gt;&gt; \n</code></pre> <pre><code>&gt;&gt;&gt;\nWelcome to bpython! Press &lt;F1&gt; for help.\n</code></pre> <pre><code>Python 3.9.2 (default, Feb 28 2021, 17:03:44)\nType 'copyright', 'credits' or 'license' for more information\nIPython 8.18.1 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]:\n</code></pre> Info <p>Para salir del modo interactivo, debes escribir <code>exit()</code> o con la combinaci\u00f3n de teclas Ctrl + D</p>"},{"location":"blog/shell-de-django-orm-y-querysets/#conceptos-de-orm-de-django","title":"Conceptos de  ORM de Django","text":""},{"location":"blog/shell-de-django-orm-y-querysets/#que-es-django-orm","title":"\u00bfQu\u00e9 es Django ORM?","text":"<p>Django ORM (Object-Relational Mapping) es una potente herramienta que permite interactuar con una base de datos relacional mediante c\u00f3digo Python. Con Django ORM, podemos crear, recuperar, actualizar y eliminar registros en la base de datos mediante objetos y m\u00e9todos Python. </p> Funcionamiento de un ORM <pre><code>graph TD\n    A[Aplicaci\u00f3n Django] --&gt; B[ORM]\n    B --&gt; C[Base de Datos]\n    B --&gt;|Genera consultas| C\n    A --&gt;|Interacci\u00f3n| B</code></pre>"},{"location":"blog/shell-de-django-orm-y-querysets/#que-son-los-querysets","title":"\u00bfQu\u00e9 son los QuerySets?","text":"<p>Un QuerySet es una colecci\u00f3n de objetos de base de datos que se pueden filtrar, ordenar y segmentar para limitar los resultados a un subconjunto espec\u00edficos. En pocas palabras, un QuerySet es una colecci\u00f3n de registros que cumplen con ciertas condiciones definidas en una consulta, pero no necesariamente se ejecuta inmediatamente contra la base de datos hasta que se necesita (esto se llama lazy evaluation o evaluaci\u00f3n perezosa).</p> Funcionamiento de los QuerySet <pre><code>graph TD\n    A[Crear QuerySet] --&gt; B{\u00bfOperaci\u00f3n?}\n    B --&gt;|S\u00ed| C[Ejecutar consulta a la DB]\n    B --&gt;|No| D[QuerySet perezoso]\n    C --&gt; E[Devolver resultados]\n    D --&gt; E</code></pre> <p>Antes de profundizar m\u00e1s en el shell de Django y los QuerySets del ORM, debemos crear una aplicaci\u00f3n para poder definir un modelo y realizar operaciones en la base de datos.</p> <p>Asumiendo que ya en este punto, tienes el proyecto generado siguiendo los pasos anteriores en crear un nuevo proyecto, continuamos con la configuraci\u00f3n de una aplicaci\u00f3n usando el archivo <code>manage.py</code>:</p> terminal<pre><code>python manage.py startapp fruits\n</code></pre> <p>Ahora podemos definir un modelo abriendo el archivo <code>fruits/models.py</code> y definir el siguiente modelo:</p> ModeloExplorador fuits/models.py<pre><code>from django.db import models\n\nclass FruitsInfo(models.Model):\n\n    name = models.CharField(max_length=30)\n    origin = models.CharField(max_length=60)\n    protein = models.DecimalField(max_digits=4, null=False, decimal_places=2)\n    energy = models.IntegerField(default=0)\n\n    def __str__(self):\n        return self.origin + \" \" + self.name\n</code></pre> <pre><code>\uf115 .\n\u251c\u2500\u2500 \ue606 manage.py\n\u251c\u2500\u2500 \uf115 fruits\n\u2502   \u251c\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 admin.py\n\u2502   \u251c\u2500\u2500 \ue606 apps.py\n\u2502   \u251c\u2500\u2500 \uf115 migrations\n\u2502   \u2502   \u2514\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 models.py\n\u2502   \u251c\u2500\u2500 \ue606 tests.py\n\u2502   \u2514\u2500\u2500 \ue606 views.py\n\u2514\u2500\u2500 \uea83 mysite\n</code></pre> <p>Luego debemos abrir el archivo <code>mysite/settings.py</code> y registrar la app generada:</p> <p>Explorador</p> <pre><code>\uf115 .\n\u251c\u2500\u2500 \ue606 manage.py\n\u251c\u2500\u2500 \uea83 myapp\n\u2514\u2500\u2500 \uf115 mysite\n    \u251c\u2500\u2500 \ue606 __init__.py\n    \u251c\u2500\u2500 \ue606 asgi.py\n    \u251c\u2500\u2500 \ue606 settings.py\n    \u251c\u2500\u2500 \ue606 urls.py\n    \u2514\u2500\u2500 \ue606 wsgi.py\n</code></pre> settings.py<pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'fruits'\n]\n</code></pre> <p>Luego generamos una nueva migraci\u00f3n con el comando <code>makemigrations</code> y corremos las migraciones pendientes con el comando <code>migrate</code>:</p> ComandosOutput Terminal<pre><code>python manage.py makemigrations #(1)!\npython manage.py migrate #(2)!\n</code></pre> <ol> <li>Genera una nueva migraci\u00f3n que incluir\u00e1 al modelo <code>FruitsInfo</code> definido anteriormente.</li> <li>Ejecuta las migraciones pendiente y crea las tablas en la base de datos.</li> </ol> <pre><code>(venv) \u279c  django_project python manage.py makemigrations\nMigrations for 'fruits':\n    fruits/migrations/0001_initial.py\n        - Create model FruitsInfo\n(venv) \u279c django_project python manage.py makemigrations\nOperations to perform:\n    Apply all migrations: admin, auth, contenttypes, fruits, sessions\nRunning migrations:\n    Applying contenttypes.0001_initial... OK\n    Applying auth.0001_initial... OK\n    Applying admin.0001_initial... OK\n    Applying admin.0002_logentry_remove_auto_add... OK\n    Applying admin.0003_logentry_add_action_flag_choices... OK\n    Applying contenttypes.0002_remove_content_type_name... OK\n    Applying auth.0002_alter_permission_name_max_length... OK\n    Applying auth.0003_alter_user_email_max_length... OK\n    Applying auth.0004_alter_user_username_opts... OK\n    Applying auth.0005_alter_user_last_login_null... OK\n    Applying auth.0006_require_contenttypes_0002... OK\n    Applying auth.0007_alter_validators_add_error_messages... OK\n    Applying auth.0008_alter_user_username_max_length... OK\n    Applying auth.0009_alter_user_last_name_max_length... OK\n    Applying auth.0010_alter_group_name_max_length... OK\n    Applying auth.0011_update_proxy_permissions... OK\n    Applying auth.0012_alter_user_first_name_max_length... OK\n    Applying fruits.0001_initial... OK\n    Applying sessions.0001_initial... OK\n(venv) \u279c django_project\n</code></pre>"},{"location":"blog/shell-de-django-orm-y-querysets/#operaciones-orm-en-el-shell","title":"Operaciones ORM en el shell","text":"<p>Ahora para comenzar a realizar operaciones, vamos a ingresar al shell como lo vimos anteriormente:</p> terminal<pre><code>python manage.py shell\n</code></pre>"},{"location":"blog/shell-de-django-orm-y-querysets/#insertar","title":"Insertar","text":"<p>En Django, una clase modelo representa una tabla de base de datos y una instancia de esa clase representa un registro particular dentro de la base de datos. Esto es an\u00e1logo a usar una sentencia <code>INSERT</code> en SQL.</p>"},{"location":"blog/shell-de-django-orm-y-querysets/#metodo-save","title":"m\u00e9todo save()","text":"<p>Se puede crear un registro simplemente instanciando la clase definida en el modelo usando los argumentos de palabras claves, luego debemos llamar al m\u00e9todo <code>save()</code> y as\u00ed confirmar el nuevo registro en la base de datos.</p> <p>En el siguiente ejemplo, veremos que sencillo es agregar un nuevo registro a la clase del modelo:</p>  python shell python shell ipython <pre><code>from fruits.models import FruitsInfo #(1)!\nrecord = FruitsInfo(name=\"banana\", origin=\"USA\", protein=1.09, energy=371) #(2)!\nrecord.save() # (3)!\n</code></pre> <ol> <li>Importamos la clase del modelo</li> <li>Instanciamos la clase y la almacenamos en una variable</li> <li>invocamos al m\u00e9todo <code>save()</code> para insertar en la base de datos</li> </ol> <pre><code>(InteractiveConsole)\n&gt;&gt;&gt; from fruits.models import FruitsInfo\n&gt;&gt;&gt; record = record = FruitsInfo(name=\"banana\", origin=\"USA\", protein=1.09, energy=371)\n&gt;&gt;&gt; record.save()\n</code></pre> <pre><code>In [1]: from fruits.models import FruitsInfo\nIn [2]: record = FruitsInfo(name=\"banana\", origin=\"USA\", protein=1.09, energy=371)\nIn [3]: record.save()\n</code></pre> <p>Nota</p> <p>Si no recibimos mensajes de errores indicados en la consola de Django, podemos suponer que el registro se agreg\u00f3 correctamente</p>"},{"location":"blog/shell-de-django-orm-y-querysets/#metodo-create","title":"m\u00e9todo create()","text":"<p>Otra forma de insertar un registro en una clase modelo es usar el m\u00e9todo <code>create()</code>. Esto elimina la necesidad de llamar al m\u00e9todo <code>save()</code> para confirmar el registro en la base de datos. El siguiente ejemplo muestra su uso:</p>  python shell python shell ipython <pre><code>from fruits.models import FruitsInfo\nFruitsInfo.objects.create(name=\"apple\", origin=\"USA\", protein=0.26, energy=218)\n</code></pre> <pre><code>(InteractiveConsole)\n&gt;&gt;&gt; from fruits.models import FruitsInfo\n&gt;&gt;&gt; FruitsInfo.objects.create(name=\"apple\", origin=\"USA\", protein=0.26, energy=218)\n&gt;&gt;&gt; &lt;FruitsInfo: USA apple&gt;\n</code></pre> <pre><code>In [1]: from fruits.models import FruitsInfo\nIn [2]: FruitsInfo(name=\"banana\", origin=\"USA\", protein=1.09, energy=371)\nOut[2]: &lt;FruitsInfo: USA apple&gt;\n</code></pre> Info <p>Si observamos el resultado en el shell, el m\u00e9todo <code>create()</code> nos retorna un QuerySet con el objeto que acabamos de insertar.</p>"},{"location":"blog/shell-de-django-orm-y-querysets/#insertar-multiples-registros","title":"Insertar m\u00faltiples registros","text":"<p>Ahora veremos c\u00f3mo insertar varios registros en una clase espec\u00edfica. Creamos una nueva clase <code>FruitsVendor</code> dentro de  <code>models.py</code> en la aplicaci\u00f3n:</p> ModeloExplorador fruits/models.py<pre><code>class FruitsVendors(models.Model):\n\n    vendor_id = models.CharField(max_length=4, null=False, primary_key=True)\n    vendor_name = models.CharField(max_length=60)\n    vendor_location = models.CharField(max_length=40)\n\n    def __str__(self):\n        return f\"{self.vendor_id} - {self.vendor_name} - {self.vendor_location}\"\n</code></pre> <pre><code>\uf115 .\n\u251c\u2500\u2500 \ue606 manage.py\n\u251c\u2500\u2500 \uf115 fruits\n\u2502   \u251c\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 admin.py\n\u2502   \u251c\u2500\u2500 \ue606 apps.py\n\u2502   \u251c\u2500\u2500 \uf115 migrations\n\u2502   \u2502   \u2514\u2500\u2500 \ue606 __init__.py\n\u2502   \u251c\u2500\u2500 \ue606 models.py\n\u2502   \u251c\u2500\u2500 \ue606 tests.py\n\u2502   \u2514\u2500\u2500 \ue606 views.py\n\u2514\u2500\u2500 \uea83 mysite\n</code></pre> <p>En la nueva clase <code>FruitsVendors</code>, hemos definido un campo con llave primaria llamado <code>vendor_id</code>. Luego, definimos el m\u00e9todo <code>__str__()</code> para mostrar todos los datos dentro de la clase en una cadena con formato.</p> <p>Generamos una nueva migraci\u00f3n y las ejecutamos con el comando <code>migrate</code>:</p> bashoutput <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre> <pre><code>Migrations for 'fruits':\nfruits/migrations/0002_fruitsvendor.py\n    - Create model FruitsVendor\nOperations to perform:\nApply all migrations: admin, auth, contenttypes, fruits, sessions\nRunning migrations:\nApplying fruits.0002_fruitsvendor... OK\n</code></pre>"},{"location":"blog/shell-de-django-orm-y-querysets/#metodo-bulk_create","title":"m\u00e9todo bulk_create()","text":"<p>Ahora podemos volver al shell e insertar m\u00faltiples registros en la clase <code>FluitsVendors</code> a la vez usando el m\u00e9todo <code>bulk_create()</code>. El siguiente ejemplo muestra su uso:</p>  python shell python shell ipython <pre><code>from fruits.models import FruitsVendors\nFruitsVendors.objects.bulk_create(\n    [\n        FruitsVendors(vendor_id=\"V001\", vendor_name=\"Fresh Fruits\", vendor_location = \"New York\"),\n        FruitsVendors(vendor_id=\"V002\", vendor_name=\"Direct Delivery\", vendor_location = \"Sao Paulo\"),\n        FruitsVendors(vendor_id=\"V003\", vendor_name=\"Fruit Mate\", vendor_location = \"Sydney\")\n    ]\n)\n</code></pre> <pre><code>(InteractiveConsole)\n&gt;&gt;&gt; from fruits.models import FruitsVendors\n&gt;&gt;&gt; FruitsVendors.objects.bulk_create(\n...     [\n...         FruitsVendors(vendor_id=\"V001\", vendor_name=\"Fresh Fruits\", vendor_location = \"New York\"),\n...         FruitsVendors(vendor_id=\"V002\", vendor_name=\"Direct Delivery\", vendor_location = \"Sao Paulo\"),\n...         FruitsVendors(vendor_id=\"V003\", vendor_name=\"Fruit Mate\", vendor_location = \"Sydney\")\n...     ]\n... )\n[&lt;FruitsVendors: FruitsVendors object (V001)&gt;,\n &lt;FruitsVendors: FruitsVendors object (V002)&gt;,\n &lt;FruitsVendors: FruitsVendors object (V003)&gt;]\n</code></pre> <pre><code>In [1]: from fruits.models import FruitsVendors\n   ...: FruitsVendors.objects.bulk_create(\n   ...:     [\n   ...:         FruitsVendors(vendor_id=\"V001\", vendor_name=\"Fresh Fruits\", vendor_location = \"New York\"),\n   ...:         FruitsVendors(vendor_id=\"V002\", vendor_name=\"Direct Delivery\", vendor_location = \"Sao Paulo\"),\n   ...:         FruitsVendors(vendor_id=\"V003\", vendor_name=\"Fruit Mate\", vendor_location=\"Sydney\")\n   ...:     ]\n   ...: )\nOut[1]:\n[&lt;FruitsVendors: FruitsVendors object (V001)&gt;,\n &lt;FruitsVendors: FruitsVendors object (V002)&gt;,\n &lt;FruitsVendors: FruitsVendors object (V003)&gt;]\n</code></pre> <p>Ahora que ya hemos guardado objetos en la base de datos, vamos a continuar con la operaci\u00f3n de obtener esos registros.</p>"},{"location":"blog/shell-de-django-orm-y-querysets/#listar","title":"Listar","text":""},{"location":"blog/shell-de-django-orm-y-querysets/#metodo-all","title":"m\u00e9todo all()","text":"<p>Verificaremos esto utilizando el m\u00e9todo <code>all()</code> que nos retorna un QuerySet que describe todos los objetos de la tabla en la base de datos:</p>  python shell python shell ipython <pre><code>from fruits.models import FruitsVendors\nFruitsVendors.objects.all()\n</code></pre> <pre><code>(InteractiveConsole)\n&gt;&gt;&gt; from fruits.models import FruitsVendors\n&gt;&gt;&gt; FruitsVendors.objects.all()\n&lt;QuerySet [&lt;FruitsVendors: V001 - Fresh Fruits - New York&gt;, &lt;FruitsVendors: V002 - Direct Delivery - Sao Paulo&gt;, &lt;FruitsVendors: V003 - Fruit Mate - Sydney&gt;]&gt;\n</code></pre> <pre><code>In [1]: from fruits.models import FruitsVendors\nIn [2]: FruitsVendors.objects.all()\nOut[2]: &lt;QuerySet [&lt;FruitsVendors: V001 - Fresh Fruits - New York&gt;, &lt;FruitsVendors: V002 - Direct Delivery - Sao Paulo&gt;, &lt;FruitsVendors: V003 - Fruit Mate - Sydney&gt;]&gt;\n</code></pre> <p>Debido a que hemos definido un m\u00e9todo <code>__str__()</code> para mostrar un objeto en un formato legible para nosotros los humanos \ud83d\ude0e, el m\u00e9todo <code>all()</code> mostrar\u00e1 solo el valor definido en el m\u00e9todo <code>__str__()</code>.</p> <p>El m\u00e9todo <code>values()</code> permite extraer los valores de un objeto determinado como se muestra a continuaci\u00f3n:</p>  python shell python shell ipython <pre><code>FruitsVendors.objects.all().values()\n</code></pre> <pre><code>(InteractiveConsole)\n&gt;&gt;&gt; FruitsVendors.objects.all(),values()\n&lt;QuerySet [{'vendor_id': 'V001', 'vendor_name': 'Fresh Fruits', 'vendor_location': 'New York'}, {'vendor_id': 'V002', 'vendor_name': 'Direct Delivery', 'vendor_location': 'Sao Paulo'}, {'vendor_id': 'V003', 'vendor_name': 'Fruit Mate', 'vendor_location': 'Sydney'}]&gt;\n</code></pre> <pre><code>In [2]: FruitsVendors.objects.all().values()\nOut[2]: &lt;QuerySet [{'vendor_id': 'V001', 'vendor_name': 'Fresh Fruits', 'vendor_location': 'New York'}, {'vendor_id': 'V002', 'vendor_name': 'Direct Delivery', 'vendor_location': 'Sao Paulo'}, {'vendor_id': 'V003', 'vendor_name': 'Fruit Mate', 'vendor_location': 'Sydney'}]&gt;\n</code></pre>"},{"location":"blog/shell-de-django-orm-y-querysets/#metodo-get","title":"m\u00e9todo get()","text":"<p>Si quisieramos recuperar un solo registro, podemos usar el m\u00e9todo <code>get()</code>. Sin embargo, si hay m\u00e1s de un registro que coincida con la consulta que especificamos dentro del m\u00e9todo <code>get()</code>, esto dar\u00e1 como resultado un error <code>MultipleObjectsReturned</code>.</p> <p>El m\u00e9todo <code>get()</code> es m\u00e1s viable cuando buscamos utilizando campos con \u00edndices \u00fanicos, como llave primaria. El siguiente ejemplo muestra el m\u00e9todo <code>get()</code> utilizando el campo id:</p>  python shell python shell ipython <pre><code>from fruits.models import FruitsInfo\nFruitsInfo.objects.get(id=2)\n</code></pre> <pre><code>&gt;&gt;&gt; from fruits.models import FruitsInfo\n&gt;&gt;&gt; FruitsInfo.objects.get(id=2)\n&lt;FruitsInfo: USA apple&gt;\n</code></pre> <pre><code>In [1]: from fruits.models import FruitsInfo\nIn [2]: FruitsInfo.objects.get(id=2)\nOut[2]: &lt;FruitsInfo: USA apple&gt;\n</code></pre>"},{"location":"blog/shell-de-django-orm-y-querysets/#busquedas","title":"B\u00fasquedas","text":"<p>En el ORM de Django, podemos especificar operadores para filtrar un conjunto. Esto es an\u00e1logo a los operadores que se pueden especificar dentro de una declaraci\u00f3n <code>WHERE</code> de SQL. Algunos ejemplos de b\u00fasquedas de campos y sus operadores SQL correspondientes son:</p> ORM SQL <code>contains</code> <code>LIKE</code> <code>range</code> <code>BETWEEN</code> <code>gte</code> (mayor o igual que) <code>&gt;=</code> <code>lte</code> (menor o igual que) <code>&lt;=</code> <p>Los siguientes ejemplos demuestran c\u00f3mo podemos utilizar las b\u00fasquedas por atributos dentro de Django shell.</p>"},{"location":"blog/shell-de-django-orm-y-querysets/#operador-contains","title":"operador - contains","text":"<p>Busquemos nombres de proveedores que incluyan la palabra \"Fruits\" en la clase <code>FruitsVendor</code>:</p>  python shell python shell ipython <pre><code>from fruits.models import FruitsVendors\nFruitsVendors.objects.filter(vendor_name__contains=\"Fruit\")\n</code></pre> <pre><code>&gt;&gt;&gt; from fruits.models import FruitsVendors\n&gt;&gt;&gt; FruitsVendors.objects.filter(vendor_name__contains=\"Fruit\")\n&lt;QuerySet [&lt;FruitsVendor: FruitsVendor object (V001)&gt;, &lt;FruitsVendor: FruitsVendor object (V003)&gt;]\n</code></pre> <pre><code>In [1]: from fruits.models import FruitsVendors\nIn [2]: FruitsVendors.objects.filter(vendor_name__contains=\"Fruit\")\nOut[2]: &lt;QuerySet [&lt;FruitsVendors: V001 - Fresh Fruits - New York&gt;, &lt;FruitsVendors: V003 - Fruit Mate - Sydney&gt;]&gt;\n</code></pre>"},{"location":"blog/shell-de-django-orm-y-querysets/#operador-gte-y-lte","title":"operador - gte y lte","text":"<p>En los siguientes ejemplos, buscaremos registros usando los operadores de mayor y menor que:</p>  python shell python shell ipython <pre><code>from fruits.models import FruitsInfo\nFruitsInfo.objects.filter(protein__gte=1)\nFruitsInfo.objects.filter(energy__lte=250)\n</code></pre> <pre><code>&gt;&gt;&gt; from fruits.models import FruitsInfo\n&gt;&gt;&gt; FruitsInfo.objects.filter(protein__gte=1)\n&lt;QuerySet [&lt;FruitsInfo: USA banana&gt;]&gt;\n&gt;&gt;&gt; FruitsInfo.objects.filter(energy__lte=250)\n&lt;QuerySet [&lt;FruitsInfo: USA apple&gt;]&gt;\n</code></pre> <pre><code>In [1]: from fruits.models import FruitsInfo\nIn [2]: FruitsInfo.objects.filter(protein__gte=1)\nOut[2]: &lt;QuerySet [&lt;FruitsInfo: USA banana&gt;]&gt;\nIn [3]: FruitsInfo.objects.filter(energy__lte=250)\nOut[3]: &lt;QuerySet [&lt;FruitsInfo: USA apple&gt;]&gt;\n</code></pre>"},{"location":"blog/shell-de-django-orm-y-querysets/#operador-range","title":"operador - range","text":"<p>En los siguientes ejemplos, buscaremos registros usando los operadores de range:</p>  python shell python shell ipython <pre><code>from fruits.models import FruitsInfo\nFruitsInfo.objects.filter(energy__range=(200, 300))\nFruitsInfo.objects.filter(energy__range=(200, 400))\n</code></pre> <pre><code>&gt;&gt;&gt; from fruits.models import FruitsInfo\n&gt;&gt;&gt; FruitsInfo.objects.filter(energy__range=(200, 300))\n&lt;QuerySet [&lt;FruitsInfo: USA apple&gt;]&gt;\n&gt;&gt;&gt; FruitsInfo.objects.filter(energy__range=(200, 400))\n&lt;QuerySet [&lt;FruitsInfo: USA banana&gt;, &lt;FruitsInfo: USA apple&gt;]&gt;\n</code></pre> <pre><code>In [1]: from fruits.models import FruitsInfo\nIn [2]: FruitsInfo.objects.filter(energy__range=(200, 300))\nOut[2]: &lt;QuerySet [&lt;FruitsInfo: USA apple&gt;]&gt;\nIn [3]: FruitsInfo.objects.filter(energy__range=(200, 400))\nOut[3]: &lt;QuerySet [&lt;FruitsInfo: USA banana&gt;, &lt;FruitsInfo: USA apple&gt;]&gt;\n</code></pre>"},{"location":"blog/shell-de-django-orm-y-querysets/#actualizar","title":"Actualizar","text":"<p>La operaci\u00f3n de actualizaci\u00f3n se puede realizar junto con el m\u00e9todo <code>filter()</code> para especificar el registro que se puede actualizar. Actualicemos el atributo <code>origin</code> al registro (<code>id=1</code>) en la tabla <code>FruitsInfo</code>:</p>  python shell python shell ipython <pre><code>from fruits.models import FruitsInfo\nFruitsInfo.objects.get(id=1).origin #(1)!\nFruitsInfo.objects.filter(id=1).update(origin='australia') #(2)!\nFruitsInfo.objects.get(id=1).origin #(3)!\n</code></pre> <ol> <li>Mostramos el valor actual del atributo origin</li> <li>Actualizamos el atributo origin</li> <li>Mostramos el valor actualizado del atributo origin</li> </ol> <pre><code>&gt;&gt;&gt; from fruits.models import FruitsInfo\n&gt;&gt;&gt; FruitsInfo.objects.get(id=1).origin\n'USA'\n&gt;&gt;&gt; FruitsInfo.objects.filter(id=1).update(origin='australia')\n1\n&gt;&gt;&gt; FruitsInfo.objects.get(id=1).origin\n'australia'\n</code></pre> <pre><code>In [1]: from fruits.models import FruitsInfo\nIn [2]: FruitsInfo.objects.get(id=1).origin\nOut[2]: 'USA'\nIn [3]: FruitsInfo.objects.filter(id=1).update(origin='australia')\nOut[3]: 1\nIn [4]: FruitsInfo.objects.get(id=1).origin\nOut[4]: 'australia'\n</code></pre>"},{"location":"blog/shell-de-django-orm-y-querysets/#eliminar","title":"Eliminar","text":"<p>El ORM nos ofrece el m\u00e9todo <code>delete()</code> para eliminar registros de una clase espec\u00edfica. Esto es an\u00e1logo a la instrucci\u00f3n <code>DELETE</code> en SQL</p>"},{"location":"blog/shell-de-django-orm-y-querysets/#eliminar-un-registro","title":"Eliminar un registro","text":"<p>Al eliminar un solo registro, debemos utilizar el m\u00e9todo <code>get()</code>, ya que devuelve directamente el objeto especificado. En el siguiente ejemplo eliminamos un registro (<code>id=3</code>) de la clase <code>FruitsInfo()</code>:</p> PythonShell <pre><code>from fruits.models import FruitsInfo\n\nFruitsInfo.objects.all() #(1)!\nFruitsInfo.objects.get(id=3).delete() #(2)!\nFruitsInfo.objects.all() #(3)!\n</code></pre> <ol> <li>Mostramos todos los objetos</li> <li>Eliminamos el objeto</li> <li>Mostramos todos los objetos nuevamente</li> </ol> <pre><code>&gt;&gt;&gt; from fruits.models import FruitsInfo\n&gt;&gt;&gt; FruitsInfo.objects.all().values()\n&lt;QuerySet [&lt;FruitsInfo: australia apple&gt;, &lt;FruitsInfo: USA banana&gt;, &lt;FruitsInfo: USA pineapple&gt;]&gt;\n&gt;&gt;&gt; FruitsInfo.objects.get(id=3).delete()\n(1, {'fruits.FruitsInfo': 1})\n&gt;&gt;&gt; FruitsInfo.objects.all()\n&lt;QuerySet [&lt;FruitsInfo: australia apple&gt;, &lt;FruitsInfo: USA banana&gt;]&gt;\n</code></pre>"},{"location":"blog/shell-de-django-orm-y-querysets/#eliminar-varios-registros","title":"Eliminar varios registros","text":"<p>El m\u00e9todo <code>delete()</code> se puede utilizar para eliminar todos los registros de una clase determinada, simplemente especificando la operaci\u00f3n de eliminaci\u00f3n con el m\u00e9todo <code>all()</code> para eliminar todos o <code>filter()</code> para eliminar un conjunto que cumpla una determinada condici\u00f3n. En el siguiente ejemplo, eliminaremos todos los registros:</p> PythonShell <pre><code>from fruits.models import FruitsInfo\n\nFruitsInfo.objects.all() #(1)!\nFruitsInfo.objects.all().delete() #(2)!\nFruitsInfo.objects.all() #(3)!\n</code></pre> <ol> <li>Mostramos todos los objetos</li> <li>Eliminamos todos los objetos</li> <li>Comprobamos, mostrando todos los objetos</li> </ol> <pre><code>&gt;&gt;&gt; from fruits.models import FruitsInfo\n&gt;&gt;&gt; FruitsInfo.objects.all()\n&lt;QuerySet [&lt;FruitsInfo: australia apple&gt;, &lt;FruitsInfo: USA banana&gt;]&gt;\n&gt;&gt;&gt; FruitsInfo.objects.all().delete()\n(2, {'fruits.FruitsInfo': 2})\n&gt;&gt;&gt; FruitsInfo.objects.all()\n&lt;QuerySet []&gt;\n</code></pre>"},{"location":"blog/a%C3%B1adir-filtros-al-panel-administrativo-de-django/","title":"A\u00f1adir Filtros al Panel Administrativo de Django","text":"","tags":["admin","filtros"]},{"location":"blog/a%C3%B1adir-filtros-al-panel-administrativo-de-django/#filtrar-por-campos-existentes","title":"Filtrar por Campos Existentes","text":"<p>Django permite a\u00f1adir filtros por campos del modelo de forma muy sencilla. Para hacerlo, basta con usar la opci\u00f3n <code>list_filter</code> en el Admin de tu modelo.</p> <pre><code># models.py\nfrom django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n    published_date = models.DateTimeField()\n\n    def __str__(self):\n        return self.title\n</code></pre> <p>Para a\u00f1adir los filtros en el panel administrativo, debes usar <code>list_filter</code> en el archivo <code>admin.py</code>:</p> admin.py<pre><code>from django.contrib import admin\nfrom .models import Post\n\nclass PostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'author', 'published_date')\n    list_filter = ('author', 'published_date')  # A\u00f1adir los filtros aqu\u00ed\n\nadmin.site.register(Post, PostAdmin)\n</code></pre> <p>\u00bfQu\u00e9 hace esto?</p> <p><code>lister_filter</code> a\u00f1ade filtros en el panel administrativo para los campos que especifiques. En este caso, podr\u00e1s filtrar los posts por el autor y la fecha de publicaci\u00f3n en la interfaz del administrador.</p>","tags":["admin","filtros"]},{"location":"blog/a%C3%B1adir-filtros-al-panel-administrativo-de-django/#busqueda-por-un-campo-de-texto","title":"B\u00fasqueda por un Campo de Texto","text":"<p>Django Admin ofrece la opci\u00f3n <code>search_fields</code> en <code>ModelAdmin</code>. Si se configura, se habilitar\u00e1 un cuadro de b\u00fasqueda en la p\u00e1gina de lista para filtrar los elementos del modelo.</p>","tags":["admin","filtros"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/","title":"Personalizar el Panel Administrativo de Django","text":"<p>Django es conocido por su rapidez en el desarrollo y su potente sistema de administraci\u00f3n listo para usarse. Desde el momento en que creas un nuevo proyecto con Django, el panel de administraci\u00f3n se configura autom\u00e1ticamente, ofreciendo una interfaz para gestionar modelos, usuarios, permisos y mucho m\u00e1s. Sin embargo, es com\u00fan que, a medida que avanzamos en el desarrollo de nuestra aplicaci\u00f3n, necesitemos personalizar este panel para adaptarlo a las necesidades espec\u00edficas de nuestro proyecto. Afortunadamente, Django facilita esta personalizaci\u00f3n tanto en t\u00e9rminos de apariencia como de funcionalidad.</p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#prepararando-el-escenario","title":"Prepararando el Escenario","text":"<p>Antes de acceder al panel administrativo, debemos contar con un proyecto de Django. Para ello debemos seguir los siguientes pasos:</p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#1-crear-un-nuevo-directorio-para-el-proyecto","title":"1. Crear un nuevo directorio para el proyecto","text":"<p>Elige un destino para tu proyecto y luego crea un nuevo directorio con el nombre para el proyecto:</p> terminal<pre><code>mkdir custom-admin-django &amp;&amp; cd custom-admin-django\n</code></pre> Info <p>Modifica el nombre por el que desees, el comando anterior simplemente est\u00e1 creando un nuevo directorio y entrando en ese directorio a la vez. En distribuciones basadas en Linux, el comando anterior se puede abreviar con <code>take custom-admin-django</code></p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#2-crear-un-entorno-virtual","title":"2. Crear un entorno virtual","text":"<p>Existen muchas maneras de crear entornos virtuales, para efectos pr\u00e1cticos haremos uso del paquete venv incluido en la mayor\u00eda de instalaciones de Python:</p> terminal<pre><code>python3 -m venv venv\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#3-activar-entorno-virtual","title":"3. Activar entorno virtual","text":"<p>Una vez se crea el entorno virtual, observar\u00e1s que se cre\u00f3 una nueva carpeta con el nombre de venv y dentro se encuentra una instalaci\u00f3n limpia de Python que tenemos que activar para empezar a instalar los paquetes. Para ello debemos ejecutar el comando que corresponda seg\u00fan el sistema operativo que utilices:</p>  Linux, macOS Windows <pre><code>source venv/bin/activate\n</code></pre> <pre><code>.venv\\Scripts\\activate\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#4-instalar-django","title":"4. Instalar Django","text":"<p>Ahora que ya tenemos el entorno virtual creado y activado, podemos instalar django usando pip:</p> terminal<pre><code>pip install django\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#5-generar-un-nuevo-proyecto-de-django","title":"5. Generar un nuevo proyecto de django","text":"<p>Una vez instalado django, procedemos a generar un nuevo proyecto en el directorio actual:</p> terminal<pre><code>django-admin startproject _site .\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#configurar-el-panel-administrativo","title":"Configurar el Panel Administrativo","text":"<p>Una vez que hayas creado tu proyecto, Django ya incluye un panel administrativo listo para usarse, pero para poder acceder a \u00e9l debes asegurarte de haber realizado algunos pasos previos:</p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#1-ejecutar-migraciones","title":"1. Ejecutar Migraciones","text":"terminal<pre><code>python manage.py migrate\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#2-crear-un-superusuario","title":"2. Crear un superusuario","text":"<p>El superusuario es el usuario con privilegios administrativos que podr\u00e1s utilizar para iniciar sesi\u00f3n en el panel. Para crear uno, ejecuta el siguiente comando:</p> terminal<pre><code>python manage.py createsuperuser\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#3-iniciar-el-servidor","title":"3. Iniciar el servidor","text":"<p>Ahora debemos ejecutar el servidor de desarrollo con el comando <code>python manage.py runserver</code>:</p> ComandoSalida terminal<pre><code>python manage.py runserver 8080\n</code></pre> <pre><code>$ python manage.py runserver 8080\nWatching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\nJanuary 09, 2025 - 23:41:14\nDjango version 5.1.4, using settings '_site.settings'\nStarting development server at http://127.0.0.1:8080/\nQuit the server with CONTROL-C.\n</code></pre> Info <p>El comando anterior lanza el servidor de desarrollo en el puerto 8080.</p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#acceder-al-panel-de-administracion","title":"Acceder al Panel de Administraci\u00f3n","text":"<p>Una vez que el servidor est\u00e9 en funcionamiento, puedes abrir la URL http://127.0.0.1:8080/ y se mostrar\u00e1 la p\u00e1gina predeterminada de Django:</p> <p></p> <p>Sin realizar ning\u00fan otro paso, podemos acceder a http://127.0.0.1:8080/admin y se mostrar\u00e1 la p\u00e1gina de iniciar sesi\u00f3n del panel de administraci\u00f3n:</p> <p></p> <p>Esto se debe a que un proyecto creado con el comando <code>startproject</code> ya viene correctamente configurado y tiene habilitado el panel administrativo. Esto implica que las aplicaciones <code>django.contrib.admin</code>, <code>django.contrib.auth</code> y <code>django.contrib.contenttypes</code> est\u00e1n habilitadas por defecto en el archivo <code>settings.py</code>:</p> settings.py<pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    # Otras aplicaciones\n]\n</code></pre> <p>Y tambi\u00e9n vienen ya configurada las URLs de administraci\u00f3n en el archivo <code>urls.py</code> en el proyecto:</p> urls.py<pre><code>from django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n</code></pre> <p>Ahora podemos acceder al panel administrativo iniciando sesi\u00f3n con el superusuario. Al hacerlo, se nos mostrar\u00e1 la siguiente interfaz:</p> <p></p> <p>De forma predeterminada, Django incluye los modelos Users y Groups como parte de su sistema de autenticaci\u00f3n y autorizaci\u00f3n. Estos modelos est\u00e1n definidos en la aplicaci\u00f3n <code>django.contrib.auth</code>, que es una de las aplicaciones incluidas de forma predeterminada en la configuraci\u00f3n de Django.</p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#personalizacion-basica","title":"Personalizaci\u00f3n B\u00e1sica","text":"","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#1-cambiar-el-idioma-del-panel-administrativo","title":"1. Cambiar el Idioma del Panel Administrativo","text":"<p>Django viene con soporte para m\u00faltiples idiomas. En nuestro caso si deseamos cambiar el idioma del panel administrativo al espa\u00f1ol, debemos realizar los siguientes pasos:</p> <ol> <li>Abrir el archivo <code>_site/settings.py</code>.</li> <li>Configurar el idioma. En el archivo settings.py, encontrar\u00e1s la opci\u00f3n <code>LANGUAGE_CODE</code>. Aqu\u00ed puedes especificar el idioma que deseas utilizar en el panel administrativo.</li> </ol> <p>Por ejemplo, para cambiar el idioma a espa\u00f1ol (Chile), debes establecer <code>LANGUAGE_CODE</code> a <code>'es-cl'</code>:</p> settings.py<pre><code>LANGUAGE_CODE = 'es-cl'\n</code></pre> <p>Ahora, cuando accedes al panel administrativo, deber\u00edas ver todos los textos traducidos al idioma que has configurado. Esto incluye todas las etiquetas de los formularios, men\u00fas y otros elementos del panel.</p> <p></p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#2-personalizar-el-titulo-del-panel-administrativo","title":"2. Personalizar el t\u00edtulo del panel administrativo","text":"<p>Puedes cambiar el t\u00edtulo del panel administrativo (que aparece en la parte superior) para que coincida con el nombre de tu proyecto o tu marca. Esto se puede hacer editado el archivo <code>_site/urls.py</code> o en un archivo de configuraci\u00f3n similar, utilizando las propiedades e <code>admin.site</code>:</p> urls.py<pre><code>from django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n\nadmin.site.site_header = \"Mi sitio web\" # (1)!\nadmin.site.site_title = \"Portal de mi web\" # (2)!\nadmin.site.index_title = \"Bienvenidos al portal de administraci\u00f3n\" # (3)!\n</code></pre> <ol> <li><code>site_header</code>: T\u00edtulo en la parte superior del panel de administraci\u00f3n.</li> <li><code>site_title</code>: T\u00edtulo en la pesta\u00f1a del navegador.</li> <li><code>index_title</code>: T\u00edtulo en la p\u00e1gina principal del panel administrativo.</li> </ol> <p>No es necesario tocar las plantillas ni hacer ninguna otra modificaci\u00f3n, y todo deber\u00eda funcionar correctamente con estos cambios.</p> <p></p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#3-personalizar-la-paleta-de-colores-y-estilos-con-css","title":"3. Personalizar la paleta de colores y estilos con CSS","text":"<p>Aunque el panel de administraci\u00f3n de Django es funcional desde el principio, su apariencia es bastante simple. Si deseas darle un toque m\u00e1s personalizado, puedes hacerlo de varias maneras, desde cambiar los estilos CSS hasta usar un tema de terceros.</p> <p>Para cambiar estilos con CSS personalizado, sigue estos pasos:</p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#1-configurar-los-archivos-estaticos","title":"1. Configurar los archivos est\u00e1ticos","text":"<p>Django proporciona configuraciones espec\u00edficas para gestionar los archivos est\u00e1ticos. Vamos a configurarlos correctamente. En el archivo <code>_site/settings.py</code>, aseg\u00farate de tener las siguientes configuraciones para los archivos est\u00e1ticos:</p> setting.py<pre><code># Directorio donde se encuentran los archivos est\u00e1ticos en desarrollo\nSTATIC_URL = '/static/'\n\n# En desarrollo, Django sirve archivos est\u00e1ticos desde la carpeta definida aqu\u00ed\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\n\n# Carpeta en la que se almacenar\u00e1n los archivos est\u00e1ticos en producci\u00f3n\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\n\n# en producci\u00f3n se utiliza el comando `python manage.py collectstatic` para recopilar todos los archivos est\u00e1ticos.\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#2crear-y-editar-un-archivo-css-personalizado","title":"2.Crear y editar un archivo CSS personalizado","text":"<p>Crea un archivo CSS en el directorio est\u00e1tico de tu proyecto, en nuestro caso en la ra\u00edz en un directorio <code>static/css/custom_admin.css</code>. Dentro de este archivo, puedes a\u00f1adir los estilos que desees para modificar la apariencia del panel. Ejemplo:</p> custom_admin.css<pre><code>body {\n    background-color: #f4f4f4;\n}\n\n#content-main {\n    background-color: #fff;\n    border-radius: 8px;\n    padding: 20px;\n}\n</code></pre> <p>Para identificar los elementos espec\u00edficos que desees manipular, abre las devtools del navegador y juega con el selector:</p> <p></p> <p>El panel administrativo de Django utiliza variables CSS personalizables para definir una serie de colores y estilos generales. Gracias a esto, puedes sobrescribir los colores del panel de administraci\u00f3n sin tener que modificar todo el CSS. Para ver las variables que usa Django, puedes abrir nuevamente las devtools del navegador, pero ahora en la pesta\u00f1a Source:</p> <p></p> <p>Una vez que hayas elegido el color que deseas cambiar de forma definitiva, abre el archivo CSS y sobrescribe la variable correspondiente. Por ejemplo:</p> custom_admin.css<pre><code>:root {\n    --secondary: #000 !important;\n}\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#3-sobrescribir-la-plantilla-base","title":"3. Sobrescribir la Plantilla Base","text":"<p>Para que Django cargue el archivo CSS creado anteriormente, debes sobrescribir la plantilla base del panel administrativo. Crea un directorio llamado <code>templates/admin</code> en la ra\u00edz y coloca un archivo llamado <code>base_site.html</code>, el contenido lo podemos copiar de la plantilla base de administraci\u00f3n de Django.</p> templates/admin/base_site.html<pre><code>{% extends \"admin/base.html\" %}\n{% load static %} &lt;!-- (1)! --&gt;\n\n{% block extrahead %}\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/custom_admin.css' %}\"&gt;\n{% endblock %}\n\n\n{% block title %}{% if subtitle %}{{ subtitle }} | {% endif %}{{ title }} | {{ site_title|default:_('Django site admin') }}{% endblock %}\n\n{% block branding %}\n&lt;div id=\"site-name\"&gt;&lt;a href=\"{% url 'admin:index' %}\"&gt;{{ site_header|default:_('Django administration') }}&lt;/a&gt;&lt;/div&gt;\n{% if user.is_anonymous %}\n  {% include \"admin/color_theme_toggle.html\" %}\n{% endif %}\n{% endblock %}\n</code></pre> <ol> <li>Esto es un tag de Django que se utiliza para cargar la funcionalidad que Django pueda cargar correctamente el tag <code>{% static %}</code>.</li> </ol> <p>Para que el template sea reconocido por Django, debes agregar la ubicaci\u00f3n en el archivo <code>_site/settings.py</code> del proyecto:</p> _site/settings.py<pre><code>TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates',\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#usar-temas-de-tercero","title":"Usar Temas de Tercero","text":"<p>En lugar de escribir CSS desde cero, puedes usar un tema de tercero para darle un toque moderno y atractivo al panel de administraci\u00f3n sin necesidad de realizar ajustes complicados.</p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#que-es-django-admin-interface","title":"\u00bfQu\u00e9 es <code>django-admin-interface</code>?","text":"<p>El django-admin-interface es un paquete para Django que proporciona un tema visualmente atractivo y moderno para el panel de administraci\u00f3n. Con \u00e9l, puedes cambiar f\u00e1cilmente el estilo de los formularios, tablas, botones y muchos otros elementos del panel administrativo sin tener que personalizar todo el CSS manualmente y es personalizable por el propio administrador. Para configurar este paquete, sigue estos pasos:</p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#paso-1-instalar-el-paquete-django-admin-interface","title":"Paso 1: Instalar el paquete <code>django-admin-interface</code>","text":"terminal<pre><code>pip install django-admin-interface\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#paso-2-agregar-el-paquete-a-la-lista-de-aplicaciones","title":"Paso 2: Agregar el paquete a la lista de aplicaciones","text":"_site/settings.py<pre><code>INSTALLED_APPS = [\n    # Agregar django-admin-interface\n    'admin_interface',\n    'colorfield', # Requerido por django-admin-interface\n    # Otras aplicaciones de Django\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles'\n]\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#paso-3-ejecutar-migraciones","title":"Paso 3: Ejecutar migraciones","text":"<p>Para que todo funcione correctamente, es necesario ejecutar las migraciones del paquete <code>django-admin-interface</code>. Esto configura las tablas necesarias en la base de datos:</p> terminal<pre><code>python manage.py migrate\n</code></pre> <p>\u00a1Importante!</p> <p>Si has sobrescrito la plantilla <code>base_site.html</code>, el tema no se cargar\u00e1 autom\u00e1ticamente. La plantilla personalizada estar\u00eda anulando las configuraciones predeterminada de <code>django-admin-interface</code>. Para evitar temporalmente esto, renombra la plantilla, por ejemplo de <code>base_site.html</code> a <code>draft_base_site.html</code>. Si deseas sobrescribir el <code>base_site.html</code> usando este paquete, puedes usar django-apptemplates</p> <p>Una vez que hayas instalado y configurado <code>django-admin-interface</code>, debes volver a entrar al panel de administraci\u00f3n y verificar cambios:</p> <p></p>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#paso-4-sobrescribir-base_sitehtml-opcional","title":"Paso 4: Sobrescribir base_site.html (Opcional)","text":"<p>Para poder conservar los t\u00edtulos que hab\u00edamos personalizado con la propiedad <code>admin.site.site_header</code>, puedes usar django-apptemplates y luego en la plantilla <code>base_site.html</code> agregar <code>{% extends \"admin_interface:admin/base_site.html\" %}</code>:</p> <p>1. Instala el paquete:</p> terminal<pre><code>pip install django-apptemplates\n</code></pre> <p>2. En el archivo <code>_site/settings.py</code> a\u00f1adimos lo siguiente:</p> Versiones de Django superior a 1.8Versiones de Django inferior a 1.8 _site/settings.py<pre><code>TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates',\n        ],\n        # 'APP_DIRS': True # Comenta esta l\u00ednea, sino habr\u00e1 conflicto.\n        'OPTIONS': {\n            'loaders': [\n                'apptemplates.Loader',\n                'django.template.loaders.filesystem.Loader',\n                'django.template.loaders.app_directories.Loader',\n            ],\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n</code></pre> _site/settings.py<pre><code>TEMPLATE_LOADERS = (\n    'apptemplates.Loader',\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n)\n</code></pre> <p>3. En el archivo <code>base_site.html</code> agregamos lo siguiente:</p> templates/admin/base_site.html<pre><code>{% extends \"admin_interface:admin/base_site.html\" %}\n{% load i18n static admin_interface_tags %}\n{% block extrahead %}\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/custom_admin.css' %}\"&gt;\n{% endblock %}\n{% block branding %}\n{% get_admin_interface_theme as theme %}\n&lt;h1 id=\"site-name\"&gt;\n    &lt;a href=\"{% url 'admin:index' %}\"&gt;\n        {% if theme.logo_visible %}\n            {% if theme.logo %}\n            &lt;img class=\"logo\" style=\"display:none;\" src=\"{{ theme.logo.url }}\" {% if theme.logo.width %}width=\"{{ theme.logo.width }}\"{% endif %} {% if theme.logo.height %}height=\"{{ theme.logo.height }}\"{% endif %}&gt;\n            {% else %}\n            &lt;img class=\"logo default\" style=\"display:none;\" src=\"milogo.webp\" width=\"104\" height=\"36\"&gt;\n            {% endif %}\n        {% endif %}\n        {% if theme.title_visible %}\n        &lt;span&gt;{% if 'Django' in theme.title %}{{ site_header|default:_('Django administration') }}{% else %}{% trans theme.title %}{% endif %}&lt;/span&gt;\n        {% endif %}\n    &lt;/a&gt;\n&lt;/h1&gt;\n{% endblock %}\n</code></pre>","tags":["admin","customizar"]},{"location":"blog/personalizar-el-panel-administrativo-de-django/#formularios-personalizados","title":"Formularios Personalizados","text":"<p>Puedes crear formularios personalizados para tus modelos</p>","tags":["admin","customizar"]},{"location":"comenzando/crear-una-aplicacion-de-encuestas/","title":"Crea tu primera aplicaci\u00f3n con Django","text":"<p>Aqu\u00ed vamos realizar una aplicaci\u00f3n que est\u00e1 basada en un art\u00edculo de la documentaci\u00f3n de Django; Escribiendo su primera aplicaci\u00f3n en Django, la diferencia es que aqu\u00ed se incluyen otros temas relacionados como la configuraci\u00f3n de un entorno de desarrollo y conceptos que ser\u00e1n de mucha ayuda para el entendimiento a lo largo del tutorial.</p>"},{"location":"comenzando/crear-una-aplicacion-de-encuestas/#puesta-en-marcha-de-un-entorno-de-desarrollo","title":"Puesta en marcha de un entorno de desarrollo","text":"<p>Cuando instalamos Python3 obtenemos un \u00fanico entorno global que es compartido por todos los proyectos y todo el c\u00f3digo de Python. Si bien podr\u00edamos instalar Django y otros paquetes en el entorno global. Sin embargo s\u00f3lo puedes instalar una versi\u00f3n en particular de cada paquete.</p> Nota <p>Las aplicaciones Python instaladas en el entorno global pueden entrar en conflicto potencialmente unas con otras (Ej. si dependen de diferentes versiones del mismo paquete).</p> <p>Si instalamos Django dentro del entorno por defecto/global s\u00f3lo podr\u00e1s apuntar a una s\u00f3la versi\u00f3n de Django en la computadora. Esto puede ser un problema si quieres crear en el futuro nuevos sitios (usando las \u00fatilmas versiones de Django) pero manteniendo los sitios web que dependen de versiones m\u00e1s antiguas.</p> <p>Como resultado, los desarrolladores experimentados en Python/Django normalmente configuran y ejecutan las aplicaciones Python dentro de entornos virtuales Python independientes.</p> <pre><code>graph TD\n    B(\"&lt;img src='https://raw.githubusercontent.com/EniDev911/assets/d08cddbcf99c8a08cf01b64868633c8b38cb162a/svg/software/python.svg'; width='28' align='center'/&gt;&lt;br&gt;Python 3.9\")\n    B--&gt;C(\"&lt;img src='https://raw.githubusercontent.com/EniDev911/assets/d08cddbcf99c8a08cf01b64868633c8b38cb162a/svg/software/python.svg'; width='28' align='center'/&gt;&lt;br&gt;Python 3.6\")\n    B--&gt;D(\"&lt;img src='https://raw.githubusercontent.com/EniDev911/assets/d08cddbcf99c8a08cf01b64868633c8b38cb162a/svg/software/python.svg'; width='28' align='center'/&gt;&lt;br&gt;Python 3.7\")\n    B--&gt;E(\"&lt;img src='https://raw.githubusercontent.com/EniDev911/assets/d08cddbcf99c8a08cf01b64868633c8b38cb162a/svg/software/python.svg'; width='28' align='center'/&gt;&lt;br&gt;Python 3.8\")</code></pre>"},{"location":"comenzando/crear-una-aplicacion-de-encuestas/#crear-un-nuevo-proyecto","title":"Crear un nuevo proyecto","text":"<p>Una vez tenemos a nuestra disposici\u00f3n Django, se nos habilitar\u00e1 un script para la gesti\u00f3n de proyectos.</p> <p>Desde la l\u00ednea de comando, nos vamos al directorio donde vamos a trabajar y usamos el script <code>django-admin</code> de la siguiente manera para crear un nuevo proyecto:</p> <pre><code>django-admin startproject misitio\n</code></pre>"},{"location":"comenzando/crear-una-aplicacion-de-encuestas/#ejecutar-el-servidor-de-desarrollo","title":"Ejecutar el servidor de desarrollo","text":"<p>Para verificar que nuestro proyecto funcione. Cambiamos al directorio del proyecto generado, y dentro ejecutamos el siguiente comando:</p> <pre><code>python manage.py runserver\n</code></pre> Nota <p>De forma predeterminada, cuando lanzamos el servidor de desarrollo se utiliza el puerto 8000.</p> <p>Si deseamos cambiar el puerto del servidor, lo pasamos como argumento al comando <code>runserver</code>:</p> <pre><code>python manage.py runserver 8080\n</code></pre> Recarga autom\u00e1tica <p>El servidor de desarrollo recarga autom\u00e1ticamente el c\u00f3digo Python para cada solicitud seg\u00fan sea necesario. Sin embargo, algunas cosas como agregar nuevos archivos no activan el reinicio, por lo que tendr\u00edamos que reiniciar el servidor.</p>"},{"location":"comenzando/crear-una-aplicacion-de-encuestas/#crear-una-aplicacion","title":"Crear una aplicaci\u00f3n","text":"<p>Cada aplicaci\u00f3n que se crea en Django consta de un paquete Python que sigue una determinada convenci\u00f3n. Django incluye una utilidad que crea autom\u00e1ticamente la estructura b\u00e1sica de una aplicaci\u00f3n.</p> Diferencia entre Proyecto y Aplicaci\u00f3n <p>Una aplicaci\u00f3n es una aplicaci\u00f3n web que sirve para algo (Ej: Blog, aplicaci\u00f3n de encuestas, etc.).</p> <p>Un proyecto es una colecci\u00f3n de aplicaciones para un sitio web en particular.</p> <p>Para crear una aplicaci\u00f3n, desde la l\u00ednea de comandos ejecutamos lo siguiente (aseg\u00farate de estar en el mismo directorio que el script <code>manage.py</code>):</p> <pre><code>python manage.py startapp encuestas\n</code></pre>"},{"location":"comenzando/crear-una-aplicacion-de-encuestas/#definir-una-primera-vista","title":"Definir una primera vista","text":"<p>Abrimos el archivo encuestas/views.py</p> <code>encuestas/views.py</code> <pre><code>from django.http import HttpResponse\n\n\ndef index(request):\n    return HttpResponse(\"Hola mundo.\")\n</code></pre> <p>Estamos remplazando el contenido del archivo para ver el tipo de vista m\u00e1s simple en Django. Para poder llamar a la vista y mostrarla, se requiere asignarla a una URL.</p> <p>Para ello creamos un nuevo archivo dentro del directorio encuestas llamado <code>urls.py</code>:</p> Linux - BashWindows - CMD <pre><code>touch encuestas/urls.py\n</code></pre> <pre><code>type nul &gt; encuestas/urls.py\n</code></pre> <p>Luego abrimos ese archivo creado para incluir el siguiente c\u00f3digo:</p> <code>encuestas/urls.py</code> <pre><code>from django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n]\n</code></pre> <p>Cumplido lo anterior, el siguiente paso es configurar el URLconf ra\u00edz para a\u00f1adir el m\u00f3dulo <code>encuestas.urls</code>.</p> <p>Ahora en el archivo <code>misitio_django/urls.py</code> lo a\u00f1adimos de la siguiente forma:</p> <code>misitio/urls.py</code> <pre><code>from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path(\"encuestas/\", include(\"encuestas.urls\")),\n    path(\"admin/\", admin.site.urls),\n]\n</code></pre> <p>Como vemos importamos desde <code>django.urls</code> la funci\u00f3n <code>include()</code> que nos permite hacer referencias a otras URLconf.</p> <p>La idea de esta funci\u00f3n <code>include()</code> es facilitar la conexi\u00f3n y unificar la reproducci\u00f3n de URL. Dado que todo de lo que tenga que ver con la aplicaci\u00f3n de encuestas estar\u00e1n configuradas en su propia URLconf (<code>encuestas/urls.py</code>) y si en el caso que coloquemos nuestro archivo con las URLconf en otra ra\u00edz o subdirectorio la aplicaci\u00f3n seguir\u00e1 trabajando.</p> <p>Ahora tenemos la vista index vinculada a los URLconf. Podemos comprobar su funcionamiento ejecutando el servidor, si lo a cerrado vuelva a correr el comando:</p> <pre><code>python manage.py runserver\n</code></pre> <p>Luego vistamos en nuestro navegador visitamos http://localhost:8000/encuestas/</p> <p>Tambi\u00e9n vemos que tenemos la funci\u00f3n <code>path()</code> que recibe cuatro argumentos, dos de ello son requeridos route y view, y dos son opcionales kwargs y name.</p>"},{"location":"comenzando/crear-una-aplicacion-de-encuestas/#path-route","title":"path(): route","text":"<p>route es una cadena que contiene un patr\u00f3n de URL. Cuando Django procesa una petici\u00f3n comienza por el primer patr\u00f3n en urlpatters y continua hacia abajo por la lista comparando la URL solicitada con cada patr\u00f3n hasta que encuentra el que corresponda.</p> <p>Tener en cuenta que estas expresiones regulares no buscan par\u00e1metros GET y POST o el nombre de dominio. Por ejemplo si la petici\u00f3n es a la direcci\u00f3n http://www.midominio.com/encuestas/, la URLconf buscar\u00e1 encuestas/. En una petici\u00f3n a la direcci\u00f3n http://www.midominio.com/encuestas/?page=2 la URLconf tambi\u00e9n buscar\u00e1 encuestas/.</p>"},{"location":"comenzando/crear-una-aplicacion-de-encuestas/#path-view","title":"path(): view","text":"<p>Cuando Django encuentra una coincidencia de expresiones regulares llama a la funci\u00f3n de la vista especificada con un objeto HttpRequest como primer argumento y cualquiera de los valores capturados de la ruta como argumentos de palabra clave.</p>"},{"location":"comenzando/crear-una-aplicacion-de-encuestas/#path-kwargs","title":"path(): kwargs","text":"<p>Los argumentos arbitrarios de palabra clave se pueden pasar en un diccionario a la vista de destino.</p>"},{"location":"comenzando/crear-una-aplicacion-de-encuestas/#path-name","title":"path(): name","text":"<p>Dar un nombre a su URL le permite referirse a ella de forma inequ\u00edvoca desde otras partes de Django sobre todo desde las plantillas. Esta potente caracter\u00edstica le permite realizar cambios globales en los patrones de URL de nuestro proyecto modificando solo un \u00fanico archivo.</p>"},{"location":"comenzando/crear-una-aplicacion-de-encuestas/#creando-modelos","title":"Creando modelos","text":"<p>A continuaci\u00f3n definiremos modelos, sobre todo para entender la estructura de base de datos.</p> <p>En nuestra aplicaci\u00f3n de encuesta, crearemos dos modelos Pregunta y Eleccion. Una Pregunta tendr\u00e1 un campo que es la fecha de publicaci\u00f3n. Una Eleccion tiene dos campos, el texto de la elecci\u00f3n y un recuento de voto. Cada Eleccion est\u00e1 asociado con una Pregunta.</p> <p>Estos conceptos est\u00e1n representados por clases de Python. Vamos al archivo <code>encuestas/models.py</code> y agregamos lo siguiente:</p> <code>encuestas/models.py</code> <pre><code>from django.db import models\n\n\nclass Pregunta(models.Model):\n    texto_pregunta = models.CharField(max_length=200)\n    fecha_publicacion = models.DateTimeField(\"fecha de publicaci\u00f3n\")\n\n\nclass Eleccion(models.Model):\n    pregunta = models.ForeignKey(Pregunta, on_delete=models.CASCADE)\n    texto_eleccion = models.CharField(max_length=200)\n    votos = models.IntegerField(default=0)\n</code></pre> <p>Aqu\u00ed, cada modelo est\u00e1 representado por una clase que divide en subclases a partir de <code>django.db.models.Model</code>. Cada modelo tiene una serie de variables de clase, cada una de las cuales representa un campo de la base de datos en el modelo.</p> <p>Cada campo est\u00e1 representado por una instancia de una clase Field, por ejemplo, CharField para campos de caracteres y DateTimeField para variables de tiempo y fecha. Esto le dice a Django qu\u00e9 tipo de datos cada campo contiene.</p> <p>El nombre de cada instancia Field (por ejemplo, texto_pregunta o fecha_publicacion) es el nombre del campo. Django va usar este valor en el c\u00f3digo para usarlo como nombre de la columna en la base de datos.</p>"},{"location":"configuracion/base-de-datos/","title":"Base de datos","text":""},{"location":"configuracion/base-de-datos/#configuracion-de-la-base-de-datos","title":"Configuraci\u00f3n de la base de datos","text":""},{"location":"configuracion/otra-base-de-datos/","title":"Otra base de datos","text":""},{"location":"configuracion/otra-base-de-datos/#otra-base-de-datos","title":"Otra base de datos","text":"<p>Este archivo <code>mysite/settings.py</code> es un m\u00f3dulo normal de Python con variables de nivel de m\u00f3dulo que representan la configuraci\u00f3n de Django.</p> <p>Por defecto la configuraci\u00f3n de Django utiliza SQLite como motor de base de datos. Esta es la opci\u00f3n m\u00e1s f\u00e1cil ya que SQLite est\u00e1 incluido en Python por lo que no se requiere instalar nada m\u00e1s para soportar este motor de base de datos. Sin embargo, al iniciar un proyecto real, nos conviene utilizar bases de datos m\u00e1s potente como PostgreSQL para evitar dolores de cabeza a futuro.</p> <p>Si queremos cambiar de motor de base de datos, abr\u00e1 el archivo <code>mysite/settings.py</code>, y buscamos el item <code>DATABASES</code> en la clave <code>default</code> :</p> <code>my_project/settings.py</code> <pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n</code></pre>"},{"location":"configuracion/otra-base-de-datos/#configurar-postgres","title":"Configurar Postgres","text":"<p>Lo primero que debemos hacer es instalar la biblioteca psycopg2:</p> <pre><code>pip install psycopg2-binary\n</code></pre> <code>my_project/settings.py</code> <pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2,\n        'NAME': 'project_db',\n        'USER': 'postgres' # \ud83d\udc48 tu usuario para postgres,\n        'PASSWORD': 'postgres' # \ud83d\udc48 tu password para postgres,\n        'HOST': 'localhost',\n        'PORT': ''\n    }\n}\n</code></pre> <p>En este caso la base de datos tiene por nombre project_db, el usuario y password es postgres.</p>"},{"location":"introduccion/","title":"Introducci\u00f3n a Django","text":"<p>En este art\u00edculo sobre Django, abordaremos las caracter\u00edsticas principales, incluidas algunas funciones avanzadas que no profundizaremos en ello en este m\u00f3dulo.</p>"},{"location":"introduccion/#que-es-django","title":"\u00bfQu\u00e9 es Django?","text":"<p>Django te ayuda a desarrollar software que sea:</p> <p>Completo</p> <p>Django sigue la filosof\u00eda de \"Baterias incluidas\" y proporciona casi todo lo que un desarrollador quiere hacer.</p> <p>Versat\u00edl</p> <p>Django puede utilizarse para crear cualquier tipo de sitio web, desde sistemas de gesti\u00f3n de contenidos y wikis hasta redes sociales y sitios de noticias. Puede funcionar con cualquier framework del lado del cliente y puede entregar contenido en casi cualquier formato (HTML, canales RRS, JSON, XML, entre otros).</p> <p>Internamente, si bien proporciona opciones para casi funcionalidad por ejemplo, varias bases de datos populares, motores de plantilla, etc. Tambi\u00e9n puede ampliarse para utilizar otros componentes si es necesario.</p> <p>Seguro</p> <p>Django ayuda a los desarrolladores a evitar muchos errores comunes de seguridad al proporcionar un marco de trabajo que ha sido dise\u00f1ado para \"hacer lo correcto\" para proteger el sitio web de forma autom\u00e1tica. Por ejemplo, Django proporciona una forma segura de administrar cuentas de usuario y contrase\u00f1as.</p> <p>Django habilita una protecci\u00f3n contra muchas vulnerabilidades de forma predeterminada, incluyendo la inyecci\u00f3n SQL, secuencias de comandos entre sitios, falsificaci\u00f3n de solicitades entre sitios.</p> <p>Escalable</p> <p>Django utiliza una arquitectura de \"nada compartido\" basado en componentes (cada parte de la arquitectura es independiente de las dem\u00e1s y, por lo tanto, puede reemplazarse o cambiarse si es necesario).</p>"},{"location":"introduccion/#como-se-ve-el-codigo-django","title":"\u00bfC\u00f3mo se ve el c\u00f3digo Django?","text":"<p>En un sitio web tradicional basado en datos, una aplicaci\u00f3n web espera solicitudes HTTP del navegador web (u otro cliente). Cuando se recibe una solicitud, la aplicaci\u00f3n</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/django/","title":"Django","text":""},{"location":"blog/category/formularios/","title":"Formularios","text":""},{"location":"blog/category/views/","title":"Views","text":""}]}